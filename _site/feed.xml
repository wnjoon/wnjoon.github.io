<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-17T21:45:04+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">//TODO: Write Blog</title><subtitle>A (nearly) no-CSS, fast, minimalist Jekyll theme.
</subtitle><author><name>Wonjoon</name></author><entry><title type="html">defer in Go Doesn’t Always Reflect the Latest Value</title><link href="http://localhost:4000/2025/03/14/go-defer-value/" rel="alternate" type="text/html" title="defer in Go Doesn’t Always Reflect the Latest Value" /><published>2025-03-14T00:00:00+09:00</published><updated>2025-03-14T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/14/go-defer-value</id><content type="html" xml:base="http://localhost:4000/2025/03/14/go-defer-value/"><![CDATA[<h2 id="contents">Contents</h2>

<ul>
  <li><a href="#the-problem">The Problem</a></li>
  <li><a href="#the-reason-why-status-is-not-updated">The Reason why status is not updated</a></li>
  <li><a href="#how-to-fix-it">How to Fix It?</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="the-problem">The Problem</h2>

<p>Consider the following Go function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">f</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">status</span> <span class="kt">string</span>  <span class="c">// Initialized as an empty string</span>
    <span class="k">defer</span> <span class="n">notify</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">foo</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">status</span> <span class="o">=</span> <span class="s">"error"</span>  <span class="c">// Status changes here, but defer does not reflect this change</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="n">status</span> <span class="o">=</span> <span class="s">"success"</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We might expect notify(status) to reflect the latest value of status.
However, in reality, it always receives an empty string (<code class="language-plaintext highlighter-rouge">""</code>), regardless of how status is updated later.</p>

<h2 id="the-reason-why-status-is-not-updated">The Reason why status is not updated</h2>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">status</span> <span class="kt">string</span> <span class="c">// ""</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">status</code> is initialized as an empty string</li>
  <li><code class="language-plaintext highlighter-rouge">defer</code> evaluates its arguments immediately when declared.
    <ul>
      <li>When <code class="language-plaintext highlighter-rouge">defer notify(status)</code> is called, <code class="language-plaintext highlighter-rouge">status</code> is still an empty string.</li>
      <li>Thus, <code class="language-plaintext highlighter-rouge">defer</code> captures the empty string(<code class="language-plaintext highlighter-rouge">""</code>) at this moment and never updates, even if <code class="language-plaintext highlighter-rouge">status</code> changes later.</li>
    </ul>
  </li>
  <li>Even though <code class="language-plaintext highlighter-rouge">status</code> is modified in the function, the deferred function call was already bound to the original value of <code class="language-plaintext highlighter-rouge">status</code> (empty string).</li>
  <li>In Go, when a function is deferred, its arguments are evaluated and stored immediately—not when the function actually executes.</li>
</ul>

<h2 id="how-to-fix-it">How to Fix It?</h2>

<p>To ensure that notify(status) receives the latest value of status, we can use two different approaches.</p>

<h3 id="1-using-a-closure-anonymous-function">1. Using a Closure (Anonymous Function)</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span> <span class="n">notify</span><span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="p">}()</span>
</code></pre></div></div>

<ul>
  <li>Instead of immediately passing <code class="language-plaintext highlighter-rouge">status</code> to <code class="language-plaintext highlighter-rouge">notify</code>, we defer an anonymous function.</li>
  <li>This function captures <code class="language-plaintext highlighter-rouge">status</code> at the moment <code class="language-plaintext highlighter-rouge">defer</code> executes, ensuring it reflects the latest value.</li>
  <li>When <code class="language-plaintext highlighter-rouge">notify(status)</code> is finally called, it uses the updated value of <code class="language-plaintext highlighter-rouge">status</code>.</li>
</ul>

<h3 id="2-passing-a-pointer">2. Passing a Pointer</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defer</span> <span class="n">notify</span><span class="p">(</span><span class="o">&amp;</span><span class="n">status</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>Instead of passing the value of <code class="language-plaintext highlighter-rouge">status</code>, we pass its memory address (<code class="language-plaintext highlighter-rouge">&amp;status</code>).</li>
  <li>Since <code class="language-plaintext highlighter-rouge">defer</code> captures the pointer, any changes to <code class="language-plaintext highlighter-rouge">status</code> are reflected at execution time.</li>
  <li>However, this requires modifying <code class="language-plaintext highlighter-rouge">notify</code> to accept a pointer parameter.</li>
</ul>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// If using a pointer, notify must be updated:</span>
<span class="c">// Dereference the pointer to get the latest value</span>
<span class="k">func</span> <span class="n">notify</span><span class="p">(</span><span class="n">status</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">*</span><span class="n">status</span><span class="p">)</span> 
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3-comparison-of-solutions">3. Comparison of Solutions</h3>

<table>
  <thead>
    <tr>
      <th>Approach</th>
      <th>How it Works</th>
      <th>Requires Function Signature Change?</th>
      <th>Best Use Case</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Closure (Anonymous Function)</td>
      <td>Captures <code class="language-plaintext highlighter-rouge">status</code> at execution time</td>
      <td>No</td>
      <td>Works for most cases</td>
    </tr>
    <tr>
      <td>Pointer Passing (&amp;status)</td>
      <td>Passes a pointer, reflects latest value</td>
      <td>Yes</td>
      <td>When working with functions that support pointers</td>
    </tr>
  </tbody>
</table>

<h2 id="conclusion">Conclusion</h2>

<ul>
  <li>Deferred functions capture arguments immediately, not when they actually run.</li>
  <li>If the deferred function needs the latest value, use:
    <ul>
      <li>Closures (Anonymous Functions): Recommended, as they don’t require modifying function signatures.</li>
      <li>Pointers (&amp;status): Useful when modifying function behavior explicitly.</li>
    </ul>
  </li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="go" /><summary type="html"><![CDATA[In Go, Deferred functions capture arguments immediately, not when they actually run.]]></summary></entry><entry><title type="html">Using sync.Cond for Goroutine Synchronization in Go</title><link href="http://localhost:4000/2025/03/13/go-sync-cond/" rel="alternate" type="text/html" title="Using sync.Cond for Goroutine Synchronization in Go" /><published>2025-03-13T00:00:00+09:00</published><updated>2025-03-13T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/13/go-sync-cond</id><content type="html" xml:base="http://localhost:4000/2025/03/13/go-sync-cond/"><![CDATA[<h2 id="contents">Contents</h2>

<ul>
  <li><a href="#what-is-synccond">What is <code class="language-plaintext highlighter-rouge">sync.Cond</code>?</a></li>
  <li><a href="#how-synccond-works">How <code class="language-plaintext highlighter-rouge">sync.Cond</code> Works</a></li>
  <li><a href="#example-donation-goal-tracker-using-synccond">Example: Donation Goal Tracker Using <code class="language-plaintext highlighter-rouge">sync.Cond</code></a></li>
  <li><a href="#comparison-signal-vs-broadcast">Comparison: <code class="language-plaintext highlighter-rouge">Signal()</code> vs. <code class="language-plaintext highlighter-rouge">Broadcast()</code></a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="what-is-synccond">What is sync.Cond?</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sync.Cond</code> is a condition variable that helps synchronize multiple goroutines.</li>
  <li>It is typically used when one or more goroutines must wait until a shared resource reaches a specific state.</li>
  <li>One goroutine waits (<code class="language-plaintext highlighter-rouge">Wait()</code>) until a condition is satisfied, and another goroutine notifies (<code class="language-plaintext highlighter-rouge">Signal()</code> or <code class="language-plaintext highlighter-rouge">Broadcast()</code>) the waiting goroutines when the condition is met.</li>
</ul>

<h2 id="how-synccond-works">How sync.Cond Works</h2>

<table>
  <thead>
    <tr>
      <th><strong>Method</strong></th>
      <th><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Wait()</code></td>
      <td>Makes a goroutine wait until a condition is met (automatically unlocks the mutex)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Signal()</code></td>
      <td>Wakes only one waiting goroutine (even if multiple goroutines are waiting)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Broadcast()</code></td>
      <td>Wakes all waiting goroutines</td>
    </tr>
  </tbody>
</table>

<h2 id="example-donation-goal-tracker-using-synccond">Example: Donation Goal Tracker Using sync.Cond</h2>

<p>The following example demonstrates how <code class="language-plaintext highlighter-rouge">sync.Cond</code> can be used to coordinate multiple goroutines that monitor a donation goal.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
    <span class="s">"sync"</span>
    <span class="s">"time"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Donation</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">cond</span>    <span class="o">*</span><span class="n">sync</span><span class="o">.</span><span class="n">Cond</span> <span class="c">// Condition variable</span>
    <span class="n">balance</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">donation</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Donation</span><span class="p">{</span>
        <span class="n">cond</span><span class="o">:</span> <span class="n">sync</span><span class="o">.</span><span class="n">NewCond</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sync</span><span class="o">.</span><span class="n">Mutex</span><span class="p">{}),</span> <span class="c">// Create a condition variable with a mutex</span>
    <span class="p">}</span>

    <span class="c">// Listener goroutine (checks if goal is reached)</span>
    <span class="n">f</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">goal</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span> <span class="c">// Acquire mutex lock</span>
        <span class="k">for</span> <span class="n">donation</span><span class="o">.</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="n">goal</span> <span class="p">{</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span> <span class="c">// Wait until balance &gt;= goal</span>
        <span class="p">}</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">donation</span><span class="o">.</span><span class="n">balance</span><span class="p">)</span>
        <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span> <span class="c">// Release mutex lock</span>
    <span class="p">}</span>

    <span class="k">go</span> <span class="n">f</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
    <span class="k">go</span> <span class="n">f</span><span class="p">(</span><span class="m">15</span><span class="p">)</span>

    <span class="c">// Updater goroutine (increments balance)</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">{</span>
            <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">balance</span><span class="o">++</span> <span class="c">// Increase balance</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">Broadcast</span><span class="p">()</span> <span class="c">// Wake all waiting goroutines</span>
        <span class="p">}</span>
    <span class="p">}()</span>

    <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">20</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span> <span class="c">// Keep program running</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="step-1-creating-a-synccond-object">Step 1: Creating a sync.Cond Object</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Donation</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">cond</span>    <span class="o">*</span><span class="n">sync</span><span class="o">.</span><span class="n">Cond</span>  
    <span class="n">balance</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="n">donation</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Donation</span><span class="p">{</span>
    <span class="n">cond</span><span class="o">:</span> <span class="n">sync</span><span class="o">.</span><span class="n">NewCond</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sync</span><span class="o">.</span><span class="n">Mutex</span><span class="p">{}),</span> 
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cond</code>: A condition variable based on <code class="language-plaintext highlighter-rouge">sync.Mutex</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">sync.Cond</code> provides synchronization between multiple goroutines using <code class="language-plaintext highlighter-rouge">Wait()</code>, <code class="language-plaintext highlighter-rouge">Signal()</code>, and <code class="language-plaintext highlighter-rouge">Broadcast()</code>.</li>
</ul>

<h3 id="step-2-listener-goroutine-fgoal-int">Step 2: Listener Goroutine (<code class="language-plaintext highlighter-rouge">f(goal int)</code>)</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">goal</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>  
    <span class="k">for</span> <span class="n">donation</span><span class="o">.</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="n">goal</span> <span class="p">{</span>
        <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span> <span class="c">// Wait until condition is met</span>
    <span class="p">}</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">donation</span><span class="o">.</span><span class="n">balance</span><span class="p">)</span>
    <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span> 
<span class="p">}</span>
</code></pre></div></div>

<p>How It Works:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">donation.cond.L.Lock()</code>: Acquires mutex lock before checking <code class="language-plaintext highlighter-rouge">donation.balance</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">for donation.balance &lt; goal</code>: Checks if goal is reached.</li>
  <li><code class="language-plaintext highlighter-rouge">donation.cond.Wait()</code>:
    <ul>
      <li>Pauses execution until another goroutine calls <code class="language-plaintext highlighter-rouge">Signal()</code> or <code class="language-plaintext highlighter-rouge">Broadcast()</code>.</li>
      <li>Automatically releases the mutex lock while waiting.</li>
    </ul>
  </li>
  <li>Once woken up, the goroutine resumes execution, prints the message, and releases the lock (<code class="language-plaintext highlighter-rouge">L.Unlock()</code>).</li>
</ol>

<h3 id="step-3-updater-goroutine">Step 3: Updater Goroutine</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">{</span>
    <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
    <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
    <span class="n">donation</span><span class="o">.</span><span class="n">balance</span><span class="o">++</span>      
    <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
    <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">Broadcast</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>How It Works:</p>

<ol>
  <li>Acquires the lock (<code class="language-plaintext highlighter-rouge">donation.cond.L.Lock()</code>).</li>
  <li>Increments the balance every second (<code class="language-plaintext highlighter-rouge">donation.balance++</code>).</li>
  <li>Releases the lock (<code class="language-plaintext highlighter-rouge">donation.cond.L.Unlock()</code>).</li>
  <li>Calls <code class="language-plaintext highlighter-rouge">donation.cond.Broadcast()</code>:
    <ul>
      <li>Wakes up all waiting goroutines.</li>
      <li>Each waiting goroutine checks if its goal is met and either continues waiting or exits.</li>
    </ul>
  </li>
</ol>

<h3 id="overall-execution-flow">Overall Execution Flow</h3>

<table>
  <thead>
    <tr>
      <th><strong>Step</strong></th>
      <th><strong>Active Goroutine(s)</strong></th>
      <th><strong>Balance</strong></th>
      <th><strong>After Broadcast()</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>f(10), f(15) (waiting)</td>
      <td>0</td>
      <td>Still waiting</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Updater goroutine</td>
      <td>1 -&gt; 9</td>
      <td>Still waiting</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Updater goroutine</td>
      <td>10</td>
      <td>f(10) wakes up and exits</td>
    </tr>
    <tr>
      <td>4</td>
      <td>f(15) (still waiting)</td>
      <td>11 -&gt; 14</td>
      <td>Still waiting</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Updater goroutine</td>
      <td>15</td>
      <td>f(15) wakes up and exits</td>
    </tr>
  </tbody>
</table>

<p>Key Observations:</p>

<ul>
  <li>Each time balance increases, <code class="language-plaintext highlighter-rouge">Broadcast()</code> wakes all waiting goroutines.</li>
  <li>If a goroutine’s goal is not met, it goes back to <code class="language-plaintext highlighter-rouge">Wait()</code>.</li>
  <li>If a goroutine’s goal is met, it exits after printing the result.</li>
  <li>Once all goals are reached, no goroutines are waiting, so <code class="language-plaintext highlighter-rouge">Broadcast()</code> no longer has any effect.</li>
</ul>

<h2 id="comparison-signal-vs-broadcast">Comparison: Signal() vs. Broadcast()</h2>

<table>
  <thead>
    <tr>
      <th><strong>Method</strong></th>
      <th><strong>Behavior</strong></th>
      <th><strong>Use Case</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Wait()</code></td>
      <td>Makes a goroutine wait until a condition is met (automatically unlocks the mutex)</td>
      <td>Used when waiting for a condition</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Signal()</code></td>
      <td>Wakes only one waiting goroutine (even if multiple goroutines are waiting)</td>
      <td>Use when a single goroutine should proceed</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Broadcast()</code></td>
      <td>Wakes all waiting goroutines</td>
      <td>Use when all goroutines should be notified</td>
    </tr>
  </tbody>
</table>

<p>When to Use <code class="language-plaintext highlighter-rouge">Signal()</code> vs. <code class="language-plaintext highlighter-rouge">Broadcast()</code></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Signal()</code>: Use when only one goroutine needs to proceed.</li>
  <li><code class="language-plaintext highlighter-rouge">Broadcast()</code>: Use when all waiting goroutines should be notified (e.g., donation.balance updates).</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sync.Cond</code> helps synchronize multiple goroutines by allowing them to wait for a condition to be met.</li>
  <li><code class="language-plaintext highlighter-rouge">Wait()</code> makes goroutines wait, while <code class="language-plaintext highlighter-rouge">Signal()</code> and <code class="language-plaintext highlighter-rouge">Broadcast()</code> notify them.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">Broadcast()</code> when all waiting goroutines should proceed, and use <code class="language-plaintext highlighter-rouge">Signal()</code> when only one goroutine should continue.</li>
  <li><code class="language-plaintext highlighter-rouge">sync.Cond</code> is useful for implementing event-based synchronization, such as resource availability or state changes.</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="go" /><summary type="html"><![CDATA[In Go, sync.Cond is a synchronization primitive that allows goroutines to efficiently wait until a certain condition is met. It helps coordinate multiple goroutines by providing a mechanism to wait (Wait()) and notify (Signal() or Broadcast()) when conditions change.]]></summary></entry><entry><title type="html">Understanding GasKVStore in Cosmos SDK</title><link href="http://localhost:4000/2025/03/12/cosmos-sdk-gaskvstore/" rel="alternate" type="text/html" title="Understanding GasKVStore in Cosmos SDK" /><published>2025-03-12T00:00:00+09:00</published><updated>2025-03-12T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/12/cosmos-sdk-gaskvstore</id><content type="html" xml:base="http://localhost:4000/2025/03/12/cosmos-sdk-gaskvstore/"><![CDATA[<h2 id="contents">Contents</h2>

<ul>
  <li><a href="#overview-of-gaskvstore">Overview of GasKVStore</a></li>
  <li><a href="#core-methods-of-gaskvstore">Core Methods of GasKVStore</a></li>
  <li><a href="#gas-consumption-based-on-key-and-value-size">Gas Consumption Based on Key and Value Size</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="overview-of-gaskvstore">Overview of GasKVStore</h2>

<p>GasKVStore measures gas usage in real-time as internal field values change during transaction execution.
Each read, write, and delete operation is designed to consume gas, ensuring that gas limits are properly enforced.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Store applies gas tracking to an underlying KVStore. It implements the KVStore interface.</span>
<span class="k">type</span> <span class="n">Store</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">gasMeter</span>  <span class="n">types</span><span class="o">.</span><span class="n">GasMeter</span>   <span class="c">// GasMeter that tracks gas usage during transactions</span>
    <span class="n">gasConfig</span> <span class="n">types</span><span class="o">.</span><span class="n">GasConfig</span>  <span class="c">// Configuration for gas costs of read/write/delete operations</span>
    <span class="n">parent</span>    <span class="n">types</span><span class="o">.</span><span class="n">KVStore</span>    <span class="c">// The underlying KVStore that stores actual data</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="core-methods-of-gaskvstore">Core Methods of GasKVStore</h2>

<table>
  <thead>
    <tr>
      <th><strong>Method</strong></th>
      <th><strong>Functionality</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Get(key)</td>
      <td>Reads the value of a given key and consumes gas proportional to the key size</td>
    </tr>
    <tr>
      <td>Set(key, value)</td>
      <td>Stores a value for a given key and consumes gas based on both key and value size</td>
    </tr>
    <tr>
      <td>Delete(key)</td>
      <td>Deletes a key-value pair and consumes a fixed amount of gas</td>
    </tr>
  </tbody>
</table>

<h3 id="1-getkey---read-operation">1. Get(key) - Read Operation</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">g</span> <span class="o">*</span><span class="n">GasKVStore</span><span class="p">)</span> <span class="n">Get</span><span class="p">(</span><span class="n">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
    <span class="n">g</span><span class="o">.</span><span class="n">meter</span><span class="o">.</span><span class="n">ConsumeGas</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">gasConfig</span><span class="o">.</span><span class="n">ReadCostPerByte</span> <span class="o">*</span> <span class="kt">uint64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)),</span> <span class="s">"Read"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">g</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>This function retrieves the value associated with a key.</li>
  <li>It is similar to searching for a word in a book.</li>
  <li>The function fetches and returns the data stored in the parent KVStore.</li>
</ul>

<h3 id="2-setkey-value---write-operation">2. Set(key, value) - Write Operation</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">g</span> <span class="o">*</span><span class="n">GasKVStore</span><span class="p">)</span> <span class="n">Set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">gasToConsume</span> <span class="o">:=</span> <span class="n">g</span><span class="o">.</span><span class="n">gasConfig</span><span class="o">.</span><span class="n">WriteCostPerByte</span> <span class="o">*</span> <span class="kt">uint64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
    <span class="n">g</span><span class="o">.</span><span class="n">meter</span><span class="o">.</span><span class="n">ConsumeGas</span><span class="p">(</span><span class="n">gasToConsume</span><span class="p">,</span> <span class="s">"Write"</span><span class="p">)</span>
    <span class="n">g</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>This function stores a new value for a given key.</li>
  <li>It works like adding new content to a book.</li>
  <li>The function records or updates data in the parent KVStore.</li>
</ul>

<h3 id="3-deletekey---delete-operation">3. Delete(key) - Delete Operation</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">g</span> <span class="o">*</span><span class="n">GasKVStore</span><span class="p">)</span> <span class="n">Delete</span><span class="p">(</span><span class="n">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">g</span><span class="o">.</span><span class="n">meter</span><span class="o">.</span><span class="n">ConsumeGas</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">gasConfig</span><span class="o">.</span><span class="n">DeleteCost</span><span class="p">,</span> <span class="s">"Delete"</span><span class="p">)</span>
    <span class="n">g</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">Delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>This function removes the data associated with a given key.</li>
  <li>It is similar to erasing a word from a book.</li>
  <li>The function deletes data stored in the parent KVStore.</li>
</ul>

<h2 id="gas-consumption-based-on-key-and-value-size">Gas Consumption Based on Key and Value Size</h2>

<p>Some methods in GasKVStore consume gas in proportion to the size of the key and value.
While gas in blockchain systems is often associated with CPU execution costs, the Cosmos SDK includes storage access costs as well.
Thus, the size of the key affects gas consumption.</p>

<h3 id="what-is-a-key">What is a Key?</h3>

<p>A key is an address that identifies a specific state in the blockchain.
It serves as an identifier for a specific data entry managed by a module.</p>

<p>Here are some examples:</p>

<h4 id="1-bank-module-storing-account-balances">1. Bank module storing account balances</h4>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="s">"balances/&lt;account_address&gt;"</span>
<span class="n">value</span> <span class="o">=</span> <span class="s">"&lt;account_balance&gt;"</span>
</code></pre></div></div>

<h4 id="2-staking-module-storing-validator-information">2. Staking module storing validator information</h4>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="s">"validators/&lt;validator_address&gt;"</span>
<span class="n">value</span> <span class="o">=</span> <span class="s">"&lt;validator_info&gt;"</span>
</code></pre></div></div>

<h4 id="3-ibc-module-storing-channel-information">3. IBC module storing channel information</h4>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="s">"ibc/ports/&lt;port_id&gt;/channels/&lt;channel_id&gt;"</span>
<span class="n">value</span> <span class="o">=</span> <span class="s">"&lt;channel_info&gt;"</span>
</code></pre></div></div>

<h3 id="why-key-size-affects-gas-consumption">Why Key Size Affects Gas Consumption?</h3>

<ul>
  <li>In the Cosmos SDK, gas is not only used for computation but also for storage access.</li>
  <li>Since accessing a key-value store (KVStore) consumes gas, larger keys and values require more gas.</li>
  <li>The longer the key, the more resources are needed to retrieve and store it, resulting in higher gas costs.</li>
</ul>

<h3 id="gas-consumption-per-method">Gas Consumption per Method</h3>

<table>
  <thead>
    <tr>
      <th><strong>Operation</strong></th>
      <th><strong>Function</strong></th>
      <th><strong>Gas Consumption Criteria</strong></th>
      <th><strong>Gas Consumption Amount</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Get(key)</td>
      <td>Reads the value of a key</td>
      <td>Proportional to key size</td>
      <td>Low</td>
    </tr>
    <tr>
      <td>Set(key, value)</td>
      <td>Stores a new value for a key</td>
      <td>Proportional to key + value size</td>
      <td>High</td>
    </tr>
    <tr>
      <td>Delete(key)</td>
      <td>Deletes a key-value pair</td>
      <td>Fixed cost (DeleteCost)</td>
      <td>Medium</td>
    </tr>
  </tbody>
</table>

<h4 id="1-getkey---gas-consumption-for-reads">1. Get(key) - Gas Consumption for Reads</h4>

<p>Gas is consumed in proportion to the key size since retrieving a value requires locating the key in storage.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Example: Retrieving an account balance from the bank module</span>
<span class="n">store</span> <span class="o">:=</span> <span class="n">ctx</span><span class="o">.</span><span class="n">KVStore</span><span class="p">(</span><span class="n">bankStoreKey</span><span class="p">)</span>
<span class="n">balanceKey</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"balances/cosmos1xyz..."</span><span class="p">)</span>  <span class="c">// Using account address as key</span>
<span class="n">balance</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">balanceKey</span><span class="p">)</span>  <span class="c">// Gas is consumed here</span>
</code></pre></div></div>

<h4 id="2-setkey-value---gas-consumption-for-writes">2. Set(key, value) - Gas Consumption for Writes</h4>

<p>Gas is consumed in proportion to the sum of key and value sizes since writing new data requires additional storage resources.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Example: Storing validator information</span>
<span class="n">store</span> <span class="o">:=</span> <span class="n">ctx</span><span class="o">.</span><span class="n">KVStore</span><span class="p">(</span><span class="n">stakingStoreKey</span><span class="p">)</span>
<span class="n">validatorKey</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"validators/valoper1abc..."</span><span class="p">)</span>  
<span class="n">validatorInfo</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"{status: active, power: 1000}"</span><span class="p">)</span>  
<span class="n">store</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">validatorKey</span><span class="p">,</span> <span class="n">validatorInfo</span><span class="p">)</span>  <span class="c">// Gas is consumed here</span>
</code></pre></div></div>

<p>Steps:</p>

<ol>
  <li>Locate the key “validators/valoper1abc…” in storage (or create a new entry if it does not exist).</li>
  <li>Store the value “{status: active, power: 1000}”.</li>
  <li>Consume gas proportional to the size of both the key and value.</li>
</ol>

<h4 id="3-deletekey---gas-consumption-for-deletes">3. Delete(key) - Gas Consumption for Deletes</h4>

<p>Gas consumption is fixed (DeleteCost), independent of key size.</p>

<p><em>Why is deletion a fixed-cost operation?</em></p>

<ul>
  <li>Deleting is a simple operation
    <ul>
      <li>Writing new data (Set) modifies storage, while deleting data (Delete) simply marks it as removed.</li>
    </ul>
  </li>
  <li>Deletion can be faster than retrieval
    <ul>
      <li>Get(key) requires searching for a key, meaning longer keys take longer to process.</li>
      <li>Delete(key) usually marks data as deleted, which is computationally simpler.</li>
    </ul>
  </li>
  <li>Merkle Tree Structure
    <ul>
      <li>The Cosmos SDK uses a Merkle Tree-based IAVL Store, where deletions primarily mark nodes as invalid rather than requiring extensive modifications.</li>
      <li>As a result, gas does not need to scale with key size.</li>
    </ul>
  </li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<ul>
  <li>GasKVStore ensures real-time tracking of gas consumption during transaction execution, preventing gas limit violations.</li>
  <li>Gas is consumed not only for CPU operations but also for accessing and modifying storage (KVStore).</li>
  <li>Optimizing key and value sizes can help reduce unnecessary gas costs.</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="cosmos-sdk" /><summary type="html"><![CDATA[GasKVStore is a core component of the Cosmos SDK that tracks gas consumption in real-time during transaction execution. It ensures that every read, write, and delete operation consumes gas, helping to prevent transactions from exceeding their gas limits.]]></summary></entry><entry><title type="html">Understanding Channel Iteration in Go: for range vs. select vs. switch</title><link href="http://localhost:4000/2025/03/09/go-channel-iteration/" rel="alternate" type="text/html" title="Understanding Channel Iteration in Go: for range vs. select vs. switch" /><published>2025-03-09T00:00:00+09:00</published><updated>2025-03-09T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/09/go-channel-iteration</id><content type="html" xml:base="http://localhost:4000/2025/03/09/go-channel-iteration/"><![CDATA[<h2 id="contents">Contents</h2>

<ul>
  <li><a href="#code-example-donation-goal-tracker">Code Example: Donation Goal Tracker</a></li>
  <li><a href="#using-for-range-to-read-from-a-channel">Using for range to Read from a Channel</a></li>
  <li><a href="#using-select-to-listen-for-channel-data">Using select to Listen for Channel Data</a></li>
  <li><a href="#comparison-table-for-range-vs-select-vs-switch">Comparison Table: <code class="language-plaintext highlighter-rouge">for range</code> vs. <code class="language-plaintext highlighter-rouge">select</code> vs. <code class="language-plaintext highlighter-rouge">switch</code></a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="code-example-donation-goal-tracker">Code Example: Donation Goal Tracker</h2>

<p>Below is a Go program that tracks donations using channels. Two goroutines (<code class="language-plaintext highlighter-rouge">f(10)</code> and <code class="language-plaintext highlighter-rouge">f(15)</code>) listen for updates on the donation balance, and another goroutine increments the balance every second.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
    <span class="s">"time"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Donation</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">balance</span> <span class="kt">int</span>
    <span class="n">ch</span>      <span class="k">chan</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">donation</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Donation</span><span class="p">{</span><span class="n">ch</span><span class="o">:</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">int</span><span class="p">)}</span>

    <span class="c">// Listener Goroutine (Checks if goal amount is reached)</span>
    <span class="n">f</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">goal</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">balance</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">donation</span><span class="o">.</span><span class="n">ch</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">goal</span> <span class="p">{</span>
                <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">balance</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">go</span> <span class="n">f</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
    <span class="k">go</span> <span class="n">f</span><span class="p">(</span><span class="m">15</span><span class="p">)</span>

    <span class="c">// Updater Goroutine (Increases balance)</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">{</span>
            <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">balance</span><span class="o">++</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">ch</span> <span class="o">&lt;-</span> <span class="n">donation</span><span class="o">.</span><span class="n">balance</span>
        <span class="p">}</span>
    <span class="p">}()</span>

    <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">25</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span> <span class="c">// Keep the program running</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="using-for-range-to-read-from-a-channel">Using for range to Read from a Channel</h2>

<p>This is same as the previous example, but written in a more concise way.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">balance</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">donation</span><span class="o">.</span><span class="n">ch</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">goal</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">balance</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="how-for-range-works">How for range Works</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">range donation.ch</code>: Iterates over incoming values from the channel.</li>
  <li>Each time a new value is sent to <code class="language-plaintext highlighter-rouge">donation.ch</code>, it is immediately read and assigned to <code class="language-plaintext highlighter-rouge">balance</code>.</li>
  <li>The loop continues waiting for new values until the channel is closed.</li>
</ul>

<h3 id="key-characteristics-of-for-range">Key Characteristics of for range</h3>

<ul>
  <li>Automatically waits for new values.</li>
  <li>Stops when the channel is closed.</li>
  <li>Simple and efficient for single-channel reading.</li>
</ul>

<h2 id="using-select-to-listen-for-channel-data">Using select to Listen for Channel Data</h2>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">goal</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="k">select</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">balance</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">donation</span><span class="o">.</span><span class="n">ch</span><span class="o">:</span> <span class="c">// Process incoming value</span>
            <span class="k">if</span> <span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">goal</span> <span class="p">{</span>
                <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">balance</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="how-select-works">How select Works</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">case balance := &lt;-donation.ch</code>: Reads from the channel only when data is available.</li>
  <li>Useful when monitoring multiple channels simultaneously.</li>
  <li>Requires an explicit return or break to exit the loop.</li>
</ul>

<h3 id="key-characteristics-of-select">Key Characteristics of select</h3>

<ul>
  <li>Can handle multiple channels.</li>
  <li>Only executes when a channel has data.</li>
  <li>Requires an explicit exit condition.</li>
</ul>

<h2 id="why-switch-is-not-used">Why switch is Not Used</h2>

<p>A switch statement is not suitable for continuously reading from a channel.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">{</span>
    <span class="n">balance</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">donation</span><span class="o">.</span><span class="n">ch</span>
    <span class="k">switch</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">goal</span><span class="o">:</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">balance</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="k">default</span><span class="o">:</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="problems-with-using-switch">Problems with Using switch</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">balance := &lt;-donation.ch</code>: Directly blocks waiting for a value (inefficient).</li>
  <li><code class="language-plaintext highlighter-rouge">default</code>: Executes unconditionally when no case matches, which prevents proper subscription behavior.</li>
</ul>

<h3 id="key-characteristics-of-switch">Key Characteristics of switch</h3>

<ul>
  <li>Cannot wait for channel updates.</li>
  <li>Inefficient because it forces direct value retrieval.</li>
  <li><code class="language-plaintext highlighter-rouge">default</code> runs even when there’s no new data.</li>
</ul>

<h2 id="comparison-table-for-range-vs-select-vs-switch">Comparison Table: for range vs. select vs. switch</h2>

<table>
  <thead>
    <tr>
      <th><strong>Method</strong></th>
      <th><strong>How It Works</strong></th>
      <th><strong>Can Monitor Channels?</strong></th>
      <th><strong>Exit Condition</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">for range</code></td>
      <td>Iterates when new values arrive</td>
      <td>Yes</td>
      <td>Automatically stops when the channel is closed</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">select</code></td>
      <td>Handles multiple channels</td>
      <td>Yes</td>
      <td>Requires explicit break or return</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">switch</code></td>
      <td>Simple conditional statement</td>
      <td>No</td>
      <td>Must manually read values</td>
    </tr>
  </tbody>
</table>

<h2 id="conclusion">Conclusion</h2>

<ul>
  <li>Use <code class="language-plaintext highlighter-rouge">for range</code> when working with a single channel that continuously receives values.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">select</code> when handling multiple channels or managing timeouts.</li>
  <li>Avoid <code class="language-plaintext highlighter-rouge">switch</code> for channel reading, as it lacks proper subscription behavior.</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="go" /><summary type="html"><![CDATA[In Go, channels are commonly used for communication between goroutines. This post explores different ways to read from channels and handle incoming values efficiently.]]></summary></entry><entry><title type="html">The Power of Daily Plan</title><link href="http://localhost:4000/2025/03/06/power-of-daily-plan/" rel="alternate" type="text/html" title="The Power of Daily Plan" /><published>2025-03-06T00:00:00+09:00</published><updated>2025-03-06T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/06/power-of-daily-plan</id><content type="html" xml:base="http://localhost:4000/2025/03/06/power-of-daily-plan/"><![CDATA[<h3 id="there-is-a-p-in-my-mbti-result">There is a P in my MBTI result</h3>

<p>In other words, I find it difficult to set clear plans, and I am more accustomed to handling things spontaneously. The reason I use the words “difficult” and “accustomed” is not because I dislike planning or prefer working on impulse.</p>

<p>I don’t know about others with a P-type personality, but at least for me, I want to be more like a J.</p>

<p>Especially in my profession as a developer, having a well-structured plan is often essential for getting work done effectively.</p>

<h3 id="why-planning-matters">Why Planning Matters</h3>

<p>People who have achieved great success in life all have one thing in common: they plan their day before they start.</p>

<p>They don’t do this because they have too much or too little time. Instead, they take a sacred moment to determine the priorities for the day.</p>

<p>I describe it as “sacred” because it is a moment where we acknowledge the natural limitations of time that we, as humans, cannot escape.</p>

<h3 id="the-challenges-of-planning">The Challenges of Planning</h3>

<p>But planning isn’t easy.</p>

<ul>
  <li>Should I be conservative with my plans to avoid failure?</li>
  <li>Or should I set goals based on my ambition to complete everything I want?</li>
  <li>What should I do when unexpected events force me to adjust my plans?</li>
</ul>

<p>Even though I am a P-type, I don’t start my day without any plans at all.
However, I struggle to create detailed plans.
I leave multiple possibilities open for tasks that may change, so it’s hard for me to set a clear, measurable goal for what I will complete.</p>

<h3 id="learning-from-the-best">Learning from the Best</h3>

<p>So, how do highly skilled people approach this?</p>

<p>Someone I deeply admire follows a simple rule:
They plan their day based on the maximum number of hours they can fully focus on work.</p>

<p>Within that time, they prioritize the most important tasks instead of simply listing everything they need to do.</p>

<p>Even though their to-do list was short, they carefully considered the importance and urgency of each task.
This approach made them a smart, efficient, and highly capable worker.</p>

<h3 id="the-importance-of-planning-in-workplaces">The Importance of Planning in Workplaces</h3>

<p>Many IT companies require employees to plan their daily tasks and share them with the team.
However, not all workplaces have such systems in place.</p>

<p>I believe that creating a daily work plan is the single most important task, even if your company doesn’t require it.</p>

<p>This habit offers more than just team alignment and problem-solving efficiency.</p>

<p>More importantly, it helps you understand your own workload and set priorities to maximize productivity within your available time.</p>

<h3 id="if-you-havent-been-planning-start-now">If You Haven’t Been Planning, Start Now</h3>

<p>Regardless of experience level, if you are still starting your day without a plan, I strongly encourage you to make a change immediately.</p>

<p>At first, I also thought, “Why waste time planning? I should just get to work.”
Because of this mindset, I missed multiple opportunities to build a solid planning habit.</p>

<p>But as my workload grew and I needed to prioritize,
I realized that changing my deeply ingrained habit of not planning was incredibly difficult.</p>

<p>Even now, I am still working on improving,
and I am writing this to keep myself motivated.</p>

<h3 id="if-you-dont-know-where-to-start">If You Don’t Know Where to Start</h3>

<p>That’s okay. Planning is never easy.</p>

<p>No one is good at it from the beginning.
But with time and practice, you will get better at it.</p>

<p>One important thing: don’t be too ambitious.
If you plan too many tasks, you will only end up feeling overwhelmed.</p>

<p>Instead, prioritize what truly matters within your time constraints,
and have the courage to delay or eliminate tasks that don’t fit into your schedule.</p>

<h3 id="we-cannot-do-everything">We cannot do everything</h3>

<p>Even the exceptional people we look up to don’t do everything.
The difference is that they distinguish between what is important and what is not.</p>

<p>They don’t try to do it all.
Instead, they focus on their priorities with a sense of humility
— knowing that time is limited, and they must make the most of it.</p>]]></content><author><name>Wonjoon</name></author><category term="essay" /><summary type="html"><![CDATA[Even the most exceptional people can’t do everything—they simply prioritize what truly matters, recognizing their limits and making the most of their time with humility.]]></summary></entry><entry><title type="html">Understanding Slice Initialization and Capacity in Go</title><link href="http://localhost:4000/2025/03/02/go-slice-initialization/" rel="alternate" type="text/html" title="Understanding Slice Initialization and Capacity in Go" /><published>2025-03-02T00:00:00+09:00</published><updated>2025-03-02T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/02/go-slice-initialization</id><content type="html" xml:base="http://localhost:4000/2025/03/02/go-slice-initialization/"><![CDATA[<h2 id="contents">Contents</h2>

<ul>
  <li><a href="#summary">Summary</a></li>
  <li><a href="#how-to-initialize-a-slice">How to Initialize a Slice</a></li>
  <li><a href="#advantages-of-preallocating-capacity">Advantages of Preallocating Capacity</a></li>
  <li><a href="#creating-a-slice-with-an-initial-length">Creating a Slice with an Initial Length</a></li>
</ul>

<h2 id="summary">Summary</h2>

<ol>
  <li>Preallocating capacity improves performance by reducing the number of reallocations when appending elements.</li>
  <li>If a slice is initialized with a non-zero length, it is pre-filled with zero values.</li>
  <li>Appending elements can trigger capacity expansion, usually doubling the size of the underlying array.</li>
</ol>

<h2 id="how-to-initialize-a-slice">How to Initialize a Slice</h2>

<p>In Go, the following code snippet creates a slice with length 0 and capacity 1:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Create a slice with length 0 and capacity 1</span>
<span class="n">slice</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Length(len)</code>: The number of elements currently stored in the slice. This represents the number of initialized elements.</li>
  <li><code class="language-plaintext highlighter-rouge">Capacity(cap)</code>: The total allocated size of the underlying array, which determines how many elements can be stored before reallocation is required.</li>
</ul>

<h2 id="advantages-of-preallocating-capacity">Advantages of Preallocating Capacity</h2>

<p>In Go, when a slice reaches its capacity, the underlying array doubles in size upon expansion.
If you expect a slice to grow significantly, preallocating capacity can improve performance by reducing memory reallocations.</p>

<p>Here is an example of capacity expansion in slices:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="c">// Initial capacity of 1</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="c">// Output: 0 1</span>

<span class="n">s</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span> <span class="c">// Fits within current capacity (1)</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="c">// Output: 1 1</span>

<span class="n">s</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="m">20</span><span class="p">)</span> <span class="c">// Exceeds capacity → reallocates (new capacity: 2)</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="c">// Output: 2 2</span>

<span class="n">s</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="m">30</span><span class="p">)</span> <span class="c">// Exceeds capacity again → reallocates (new capacity: 4)</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="c">// Output: 3 4</span>
</code></pre></div></div>

<ul>
  <li>When <code class="language-plaintext highlighter-rouge">append</code> is called, if the slice exceeds its current capacity, a new array is allocated with double the previous capacity.</li>
  <li>This reduces the number of reallocations when appending elements, optimizing performance.</li>
</ul>

<h2 id="creating-a-slice-with-an-initial-length">Creating a Slice with an Initial Length</h2>

<p>You can also specify the length when initializing a slice:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="c">// Length 0, Capacity 1</span>
<span class="n">s2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="c">// Length 1, Capacity 1</span>

<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span> <span class="c">// Output: []</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">s2</span><span class="p">)</span> <span class="c">// Output: [0]</span>
</code></pre></div></div>

<h3 id="effect-of-initializing-a-slice-with-a-non-zero-length">Effect of Initializing a Slice with a Non-Zero Length</h3>

<p>If you specify a non-zero length, the slice will be pre-filled with zero values.
This affects how append operations work:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s1</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> 
<span class="n">s2</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s2</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> 

<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s1</span><span class="p">))</span> <span class="c">// Output: [1] 1</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">s2</span><span class="p">,</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s2</span><span class="p">))</span> <span class="c">// Output: [0,1] 2</span>
</code></pre></div></div>

<h3 id="why-does-s2-expand-its-capacity">Why Does s2 Expand Its Capacity?</h3>

<ul>
  <li>s2 was initialized with a length of 1, so it already contains a zero ([0]).</li>
  <li>When appending a new element (1), it exceeds the initial capacity of 1, causing Go to double the capacity to 2.</li>
  <li>On the other hand, s1 starts with length 0, so appending a single element does not exceed its initial capacity.</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="go" /><summary type="html"><![CDATA[Understanding slice capacity behavior is essential for writing efficient Go programs, especially when dealing with large or dynamic data structures.]]></summary></entry><entry><title type="html">DOG: A New Gossip Protocol for CometBFT</title><link href="http://localhost:4000/2024/12/26/dog-gossip-protocol/" rel="alternate" type="text/html" title="DOG: A New Gossip Protocol for CometBFT" /><published>2024-12-26T00:00:00+09:00</published><updated>2024-12-26T00:00:00+09:00</updated><id>http://localhost:4000/2024/12/26/dog-gossip-protocol</id><content type="html" xml:base="http://localhost:4000/2024/12/26/dog-gossip-protocol/"><![CDATA[<h2 id="contents">Contents</h2>

<ul>
  <li><a href="#for-the-busy-modern-soul">For the busy modern soul</a></li>
  <li><a href="#the-usefulness-of-dog-in-the-persistent-peering-network">The usefulness of DOG in the persistent peering network</a></li>
  <li><a href="#comparison-flood-gossip-protocol">Comparison: Flood gossip protocol</a></li>
</ul>

<h2 id="for-the-busy-modern-soul">For the busy modern soul</h2>

<p>DOG optimizes the path for transmitting transactions to each node.</p>

<ul>
  <li>When the sent transaction is returned (cycle), it closes the path by sending a <code class="language-plaintext highlighter-rouge">HaveTx</code> message to the peer that sent the transaction.</li>
  <li><code class="language-plaintext highlighter-rouge">HaveTx</code> message only carries the transaction hash, so there is little network overhead.</li>
  <li>Gradually remove unnecessary paths to minimize duplicate transactions.
    <ul>
      <li>In the paper, It is called a <em>Closed-loop redundancy controller</em> which is a mechanism for the system to monitor the current network status and dynamically adjust the level of redundant propagation.</li>
    </ul>
  </li>
  <li>Finally, a <code class="language-plaintext highlighter-rouge">superposition of directed spanning tree</code> structure is created with each node as the root.</li>
</ul>

<p><img src="https://github.com/user-attachments/assets/44f98095-8a47-442e-9e26-62c02569e8fb" alt="Initially all routes are open" /></p>

<p><em>@Initially all routes are open</em></p>

<p><img src="https://github.com/user-attachments/assets/19b8b63c-00aa-4b00-92b4-24e2a72c4d7a" alt="The result of directed spanning trees" /></p>

<p><em>@The result: Directed spanning trees, where each node has a single, optimal path to reach every other node.</em></p>

<p>Redundancy Controller is used to set the transaction duplication tolerance range per node.</p>

<ul>
  <li>Redundancy Level
    <ul>
      <li>
        <p>The percentage of redundancy allowed in the overall transaction flow</p>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Redundancy Level <span class="o">=</span> 1 / Allowable redundancy ratio
</code></pre></div>        </div>
      </li>
      <li>The lower the Redundancy Level, the lower the tolerance for duplicate transactions</li>
      <li>f.e. <code class="language-plaintext highlighter-rouge">Redundancy Level = 0.5</code> means when 100 different transactions come in, up to 50 duplicate transactions can be received</li>
      <li>If duplicate transactions are lower than the allowable range, a <code class="language-plaintext highlighter-rouge">ResetRoute</code> message is sent to the peer to reactivate the closed route</li>
    </ul>
  </li>
</ul>

<p>Test Results</p>

<ul>
  <li>
    <p>In the test, transactions were transmitted at a speed of 500tx/s for 15 minutes from 200 nodes</p>
  </li>
  <li>
    <p>Mempool: As the path is built, the mempool size and cache hit count gradually decrease</p>
  </li>
  <li>Consensus
    <ul>
      <li>More stable block production</li>
      <li>Less additional consensus rounds for the validator is needed</li>
      <li>8 times less missing validators during voting</li>
      <li>About 2.7 times less missed blocks</li>
      <li>Additional 10% reduction in network traffic generated by <code class="language-plaintext highlighter-rouge">BlockPart</code> messages</li>
    </ul>
  </li>
  <li>Resource usage and latency
    <ul>
      <li>CPU usage reduced by 43%</li>
      <li>Memory usage reduced by 10%</li>
      <li>Total transaction verification time (checkTx) reduced by 10%</li>
      <li>Average latency: Flood (3.63s), DOG (3.14s)</li>
    </ul>
  </li>
</ul>

<h2 id="the-usefulness-of-dog-in-the-persistent-peering-network">The usefulness of DOG in the persistent peering network</h2>

<p>Persistent peering network is a network where nodes are connected to each other in a persistent way, meaning that nodes are always connected to each other. All validators are connected to each other, and since there are no multi-hops in the network, all transactions can be propagated directly to all nodes in one hop.</p>

<p>As you may have guessed, DOG is not an advantage in this environment. In a single-hop architecture, where a transaction from A to B does not need to go through C, no duplicate transactions occur. The biggest advantage of DOG is that it optimizes the overall network path by gradually reducing the paths where duplicate transactions can occur, so its use is unnecessary in this environment.</p>

<p>However, this does not mean that DOG is completely unnecessary.</p>

<p>Since it is not guaranteed that all nodes will always maintain connectivity, DOG can maintain network propagation by dynamically reconfiguring the path when a specific network connection becomes unstable.</p>

<p>In addition, even in a direct peering environment, network bandwidth can be further reduced through duplicate transaction filtering. In particular, when unnecessary redundant data is propagated in communication between nodes, DOG can detect and minimize this.</p>

<p>Finally, when the number of network nodes is greatly expanded, it may be realistically difficult to maintain persistent peering, but DOG can maintain efficient propagation even in large-scale networks by optimizing the transaction propagation path.</p>

<h2 id="comparison-flood-gossip-protocol">Comparison: Flood gossip protocol</h2>

<p><code class="language-plaintext highlighter-rouge">Flood</code> gossip protocol broadcasts a transaction to all peers in the network when the transaction is created.</p>

<p>During this process, the same transaction may be transmitted multiple times.
In a fully connected network, all nodes are directly connected to each other, which increases redundant propagation.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Flood gossip protocol simply broadcast transactions without checking for duplication, which wastes bandwidth.

For example, There are 4 nodes A, B, C, D.

- If node A sends a transaction to nodes B, C, and D, then B, C, and D also send the same transaction back to each other.
- Flood simply propagate without checking for transaction duplication, resulting in wasted bandwidth.
</code></pre></div></div>

<p>As a result, these problems occur:</p>

<ul>
  <li>Network bandwidth wastes
    <ul>
      <li>Duplicate transaction messages are continuously transmitted, which wastes bandwidth unnecessarily.</li>
    </ul>
  </li>
  <li>Performance degradation
    <ul>
      <li>Transaction propagation speed may slow down as the network becomes overloaded.</li>
    </ul>
  </li>
  <li>Scalability issues
    <ul>
      <li>As the number of network nodes increases, the number of duplicate propagated transactions also increases rapidly.</li>
    </ul>
  </li>
</ul>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://informal.systems/blog/a-new-mempool-gossip-protocol-for-cometbft">A New Mempool Gossip Protocol for CometBFT</a></li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="blockchain" /><summary type="html"><![CDATA[DOG(Dynamic Optimal Graph) is a new gossip protocol for CometBFT, reduces the bandwidth consumption by decreasing the duplicated messages.]]></summary></entry><entry><title type="html">Narwhal: Scalable Blockchain Data Propagation with DAG-Based Design</title><link href="http://localhost:4000/2024/12/17/what-is-narwhal/" rel="alternate" type="text/html" title="Narwhal: Scalable Blockchain Data Propagation with DAG-Based Design" /><published>2024-12-17T00:00:00+09:00</published><updated>2024-12-17T00:00:00+09:00</updated><id>http://localhost:4000/2024/12/17/what-is-narwhal</id><content type="html" xml:base="http://localhost:4000/2024/12/17/what-is-narwhal/"><![CDATA[<h2 id="contents">Contents</h2>

<ul>
  <li><a href="#what-is-narwhal">What is Narwhal?</a></li>
  <li><a href="#worker-and-primary">Worker and Primary</a></li>
  <li><a href="#the-process-of-narwhal">The process of Narwhal</a></li>
  <li><a href="#narwhal-combined-with-consensus-protocol">Narwhal combined with consensus protocol</a></li>
  <li><a href="#limitations">Limitations</a></li>
</ul>

<h2 id="what-is-narwhal">What is Narwhal?</h2>

<p>Every blockchain should share all transactions with nodes, and it directly affects performance, including throughput and latency.</p>

<p>Narwhal was introduced in the paper <a href="https://arxiv.org/abs/2105.11827">“Narwhal and Tusk: A DAG-based Mempool and Efficient BFT Consensus”</a>. Narwhal processes transaction propagation and validation in separate, worker and primary layers to reduce bottlenecks and provide modular-based data availability.</p>

<p>Narwhal uses DAG(Directed Acyclic Graph) to clearly define dependencies between transaction data, thereby maximizing parallelism and scalability. DAG flexibly manages the order of transactions and supports stable data propagation even when the network is massively expanded.</p>

<p><img src="https://github.com/user-attachments/assets/975a0c88-d70b-47c9-b1f8-1f9b0808baf1" alt="The relationship in the process of Narwhal" /></p>

<p><em>@The relationship in the process of Narwhal</em></p>

<h2 id="worker-and-primary">Worker and Primary</h2>

<p>When the client sends a transaction, it goes to the worker located in the node. Transactions are delivered to workers simultaneously, and each worker groups the received transactions into batches.</p>

<p>When transactions accumulate over a certain period or exceed a specified size, the batches created up to that point are transmitted to other nodes.</p>

<p>Nodes validate the received batch and send back a signature of itself to the origin worker. When a worker receives 2f + 1 of the signatures from other nodes, it creates a ‘Mempool block’, including a certificate.</p>

<p><img src="https://github.com/user-attachments/assets/36fc3b5e-1911-4d9d-8b78-8b33c7daa697" alt="The design of the mempool block. r is round, and i is block number" /></p>

<p><em>@The design of the mempool block. r is round, and i is block number</em></p>

<p>The certificate list guarantees that this Mempool block is already validated by 2f + 1 signatures from other nodes is reusable and does not need to re-propagate transactions even though the proposal has failed.</p>

<p>The primary receives Mempool blocks from workers in the same node and creates DAG for managing dependency between transactions. DAG uses authenticated Mempool blocks as nodes, and the relationships (parent-child) between each mempool block as edges connecting the nodes to determine the order of transactions and use them as data for consensus.</p>

<h2 id="the-process-of-narwhal">The process of Narwhal</h2>

<h3 id="1-make-batches-from-transactions-and-broadcast">1. Make batches from transactions and broadcast</h3>

<p>As described above, transactions sent from clients are generated in batches over a certain period or when a certain size is satisfied.</p>

<h3 id="2-get-the-signature-of-thenode">2. Get the signature of the node</h3>

<p>Nodes send back their signature to the origin node worker, not a different worker. When signature data is disseminated randomly, network traffic is increased, and data integrity is difficult to ensure.
Every batch has metadata, including the ID of the batch and worker. A worker who receives batches can send them back to the origin worker due to their containing worker ID.</p>

<h3 id="3-make-the-mempool-block-with-certification">3. Make the mempool block with certification</h3>

<p>When the worker receives more than 2f + 1 signature from other nodes, the worker creates a ‘Mempool block’ including transaction information, signature, etc.</p>

<p>Mempool block has a certification list, not a single certification to reuse when the proposal is failed. It could be a waste of network resources if the Mempool block has to obtain signatures from other nodes in every round, even though they already made certification from signatures of other nodes in previous rounds.</p>

<h3 id="4-send-dag-to-the-leadernode">4. Send DAG to the leader node</h3>

<p>Validator nodes transmit the DAG generated over a certain period to the primary of the leader node. The leader node arranges Mempool blocks from received DAGs into a single DAG and sends it to other nodes for proposal. Non-validators also generate DAG but do not send it to the leader node.</p>

<h3 id="5-when-the-round-isfailed">5. When the round is failed</h3>

<p>A round is a logical unit of time during which transaction data is propagated through the network and consensus is reached. Round failures can occur due to leader failure, network delays, malicious node behavior, etc.</p>

<p>In Narwhal, a round is defined as a process in which a specific leader is designated, and the leader merges DAG data to attempt consensus.</p>

<h4 id="in-worker">In worker</h4>

<ul>
  <li>
    <p>Even though the round failed, a worker maintains the Mempool block and reuses it in the next round.</p>
  </li>
  <li>
    <p>Since the worker continues to collect new transactions from clients regardless of round failure, new transactions are bundled into the next batch, including transactions from the previous batch, and propagated to the network.</p>
  </li>
  <li>
    <p>A batch is converted into a Mempool Block when a worker collects more than 2f+1 signatures from other nodes.</p>
  </li>
</ul>

<h4 id="in-primary">In primary</h4>

<ul>
  <li>Since the previous Mempool block is already allocated in DAG, it can be reused in the next round.</li>
</ul>

<h2 id="narwhal-combined-with-consensus-protocol">Narwhal combined with consensus protocol</h2>

<p>Most consensus algorithms, including PBFT and Hotstuff, operating with strongly coupled data propagation and consensus in the consensus process, can be improved in performance when they use Narwhal.</p>

<p>Narwhal provides increased network performance from completely separated data propagation and consensus.</p>

<h3 id="data-propagation">Data Propagation</h3>

<ul>
  <li>
    <p>In Narwhal, data availability can be ensured by both workers collecting transaction data and primary generating DAG.</p>
  </li>
  <li>
    <p>Since transaction data is propagated independently from the consensus process, the data remains valid even if the consensus fails.</p>
  </li>
</ul>

<h3 id="consensus">Consensus</h3>

<ul>
  <li>Since Narwhal has already completed the data propagation, HotStuff only needs to agree on the DAG state, which is already guaranteed by the worker and primary from Narwhal.</li>
</ul>

<p><img src="https://github.com/user-attachments/assets/3107439d-ce19-4e25-bf88-483243ad68ac" alt="Differences between Narwhal-based consensus and standalone" /></p>

<p><em>@Differences between Narwhal-based consensus and standalone</em></p>

<h2 id="limitations">Limitations</h2>

<p>Because of the mesh structure in DAG, the complexity and size would be increased rapidly when the network expands and the number of transactions is increased. To solve this, we need a strategy to periodically clean up old Mempool blocks or limit the depth and size of the DAG.</p>

<p>Also, Narwhal maintains previous DAG data, which the proposal failed, and reuses them in the next round. We also need a policy to efficiently discard old data or merge it with additional data.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://arxiv.org/abs/2105.11827">Narwhal and Tusk: A DAG-based Mempool and Efficient BFT Consensus</a></li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="blockchain" /><summary type="html"><![CDATA[Every blockchain should share all transactions with nodes, and it directly affects performance, including throughput and latency. Narwhal was introduced in the paper “Narwhal and Tusk…"]]></summary></entry><entry><title type="html">Importance of using interface while construct program and example of using go</title><link href="http://localhost:4000/2023/12/02/go-interface-architecture/" rel="alternate" type="text/html" title="Importance of using interface while construct program and example of using go" /><published>2023-12-02T00:00:00+09:00</published><updated>2023-12-02T00:00:00+09:00</updated><id>http://localhost:4000/2023/12/02/go-interface-architecture</id><content type="html" xml:base="http://localhost:4000/2023/12/02/go-interface-architecture/"><![CDATA[<h2 id="why-should-we-design-applications-based-on-interfaces">Why Should We Design Applications Based on Interfaces?</h2>

<p>Modern software applications are composed of multiple modules that interact with each other. To ensure scalability, maintainability, and flexibility, interface-based design is widely recommended.</p>

<p>Let’s take Netflix as an example. Netflix is not just a video streaming service; it includes user management, subscription payments, recommendations, advertising, and many other services. Each team within Netflix works on different components, often following their own schedules and priorities. Without a well-defined interface-based approach, collaboration and integration would become extremely complex.</p>

<p>The best way to address this challenge is to design and develop applications based on interfaces.</p>

<h2 id="how-interface-based-design-improves-the-development-process">How Interface-Based Design Improves the Development Process</h2>

<p>Let’s assume we’re developing an app that enables users to purchase subscriptions.</p>

<p>Scenario</p>

<ol>
  <li>Team A is responsible for user management, and Team B is developing the payment system.</li>
  <li>Team A needs to implement subscription purchases, which depend on Team B’s payment gateway (PG) integration.</li>
  <li>Team B is busy with other tasks and cannot immediately implement the PG integration. However, Team A cannot wait indefinitely for them to complete it.</li>
  <li>Team B provides an interface that defines the PG integration structure. Even though the actual implementation is not ready, the interface specifies what the final implementation will look like.</li>
  <li>Team A develops a mock implementation based on the provided interface and proceeds with subscription feature development.</li>
  <li>Once Team B completes the real PG integration, Team A replaces the mock implementation with the actual implementation.</li>
</ol>

<p>By adopting interface-based design, modules remain decoupled and can be developed independently without waiting for other teams.</p>

<h2 id="challenges-of-interface-based-design">Challenges of Interface-Based Design</h2>

<p>Despite its benefits, interface-based design is challenging when business logic is not well-defined.</p>

<ul>
  <li>Business requirements must be well-analyzed before development to determine what interfaces will be needed.</li>
  <li>Some Agile methodologies misinterpret speed as skipping planning. Fast development should not mean skipping clear business requirements and interface design.</li>
  <li>If Team A starts development without a clear understanding of what Team B will deliver, frequent changes to the interface can result in wasted effort.</li>
  <li>A well-defined interface can reduce development time, not increase it.</li>
</ul>

<p>To prevent unnecessary changes, a clear interface design should be agreed upon before development begins.</p>

<h2 id="how-go-supports-interface-based-design">How Go Supports Interface-Based Design</h2>

<p>Go encourages interface-based design and provides a simple yet powerful way to implement it.</p>

<p>Key Differences from Java and Other Languages</p>

<ul>
  <li>No need for explicit interface declarations in implementing structs.</li>
  <li>No separate interface files are required.</li>
  <li>If a struct implements all the methods of an interface, it automatically satisfies that interface.</li>
</ul>

<h3 id="best-practices-for-defining-interfaces-in-go">Best Practices for Defining Interfaces in Go</h3>

<ul>
  <li>Use meaningful names ending in -er to describe the action performed.</li>
  <li>Example:
    <ul>
      <li>Printer: Prints output</li>
      <li>Writer: Writes to a file</li>
    </ul>
  </li>
</ul>

<h2 id="example-designing-an-ethereum-transaction-sender-interface">Example: Designing an Ethereum Transaction Sender Interface</h2>

<p>Let’s define an interface for sending signed Ethereum transactions.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Sender</span> <span class="k">interface</span> <span class="p">{</span>
    <span class="n">SendTransaction</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">from</span> <span class="n">common</span><span class="o">.</span><span class="n">Address</span><span class="p">,</span> <span class="n">to</span> <span class="o">*</span><span class="n">common</span><span class="o">.</span><span class="n">Address</span><span class="p">,</span> <span class="n">value</span> <span class="o">*</span><span class="n">big</span><span class="o">.</span><span class="n">Int</span><span class="p">,</span> <span class="n">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="transaction-sending-approaches">Transaction Sending Approaches</h3>

<p>Ethereum transactions can be sent in two ways:</p>

<ul>
  <li>Synchronous (Sync): Waits until the transaction is mined before returning a response.</li>
  <li>Asynchronous (Async): Sends the transaction without waiting for confirmation.</li>
</ul>

<p>Since both approaches use the same parameters, we can define a single <code class="language-plaintext highlighter-rouge">Sender</code> interface.</p>

<h3 id="using-dependency-injection-for-flexibility">Using Dependency Injection for Flexibility</h3>

<p>We create a <code class="language-plaintext highlighter-rouge">TxManager</code> struct that depends on a <code class="language-plaintext highlighter-rouge">Sender</code> interface rather than a specific implementation.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">TxManager</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">sender</span> <span class="n">Sender</span>
<span class="p">}</span>

<span class="c">// Injects an implementation of Sender into TxManager</span>
<span class="k">func</span> <span class="n">NewTxManager</span><span class="p">(</span><span class="n">sender</span> <span class="n">Sender</span><span class="p">)</span> <span class="o">*</span><span class="n">TxManager</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">TxManager</span><span class="p">{</span>
        <span class="n">sender</span><span class="o">:</span> <span class="n">sender</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="different-implementations-of-the-sender-interface">Different Implementations of the Sender Interface</h3>

<p>We now create two different implementations:</p>

<ul>
  <li>SyncSender: Implements synchronous transactions.</li>
  <li>AsyncSender: Implements asynchronous transactions.</li>
  <li>Both implementations satisfy the <code class="language-plaintext highlighter-rouge">Sender</code> interface because they define the required method.</li>
</ul>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// SyncSender</span>
<span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">SyncSender</span><span class="p">)</span> <span class="n">NewSyncSender</span><span class="p">()</span> <span class="o">*</span><span class="n">SyncSender</span> <span class="p">{}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">SyncSender</span><span class="p">)</span> <span class="n">SendTransaction</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">from</span> <span class="n">common</span><span class="o">.</span><span class="n">Address</span><span class="p">,</span> <span class="n">to</span> <span class="o">*</span><span class="n">common</span><span class="o">.</span><span class="n">Address</span><span class="p">,</span> <span class="n">value</span> <span class="o">*</span><span class="n">big</span><span class="o">.</span><span class="n">Int</span><span class="p">,</span> <span class="n">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span>

<span class="c">// AsyncSender</span>
<span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">AsyncSender</span><span class="p">)</span> <span class="n">NewAsyncSender</span><span class="p">()</span> <span class="o">*</span><span class="n">AsyncSender</span> <span class="p">{}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">AsyncSender</span><span class="p">)</span> <span class="n">SendTransaction</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">from</span> <span class="n">common</span><span class="o">.</span><span class="n">Address</span><span class="p">,</span> <span class="n">to</span> <span class="o">*</span><span class="n">common</span><span class="o">.</span><span class="n">Address</span><span class="p">,</span> <span class="n">value</span> <span class="o">*</span><span class="n">big</span><span class="o">.</span><span class="n">Int</span><span class="p">,</span> <span class="n">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span>
</code></pre></div></div>

<h3 id="injecting-the-implementations">Injecting the Implementations</h3>

<p>We can now inject either <code class="language-plaintext highlighter-rouge">SyncSender</code> or <code class="language-plaintext highlighter-rouge">AsyncSender</code> into the TxManager dynamically.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">syncSender</span> <span class="o">:=</span> <span class="n">NewSyncSender</span><span class="p">()</span>
    <span class="n">asyncSender</span> <span class="o">:=</span> <span class="n">NewAsyncSender</span><span class="p">()</span>

    <span class="c">// Use synchronous transaction processing</span>
    <span class="n">txm</span> <span class="o">:=</span> <span class="n">NewTxManager</span><span class="p">(</span><span class="n">syncSender</span><span class="p">)</span>

    <span class="c">// Use asynchronous transaction processing</span>
    <span class="n">txm</span> <span class="o">=</span> <span class="n">NewTxManager</span><span class="p">(</span><span class="n">asyncSender</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="advantages-of-interface-based-design">Advantages of Interface-Based Design</h2>

<h3 id="decouples-modules">Decouples Modules</h3>

<ul>
  <li>Teams can develop independently without waiting for other teams.</li>
  <li>Reduces dependencies between different components.</li>
</ul>

<h3 id="enables-dependency-injection">Enables Dependency Injection</h3>

<ul>
  <li>Implementations can be easily replaced or modified without changing business logic.</li>
  <li>Useful for mock testing and swapping different implementations.</li>
</ul>

<h3 id="enhances-maintainability--scalability">Enhances Maintainability &amp; Scalability</h3>

<ul>
  <li>Clear separation of concerns makes code easier to maintain.</li>
  <li>New features can be added without modifying existing components.</li>
</ul>

<h3 id="encourages-reusability">Encourages Reusability</h3>

<ul>
  <li>The same interface can have multiple implementations, making it reusable across different scenarios.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Why should we use interface-based design:</p>

<ul>
  <li>Modularization – Develop and maintain different parts of a system independently.</li>
  <li>Flexibility – Swap implementations without changing business logic.</li>
  <li>Scalability – Extend and modify software without breaking existing functionality.</li>
  <li>Testing – Use mock implementations for unit tests.</li>
</ul>]]></content><author><name>wonjoon</name></author><category term="go" /><summary type="html"><![CDATA[By designing software around interfaces, we minimize dependencies, improve collaboration, and build scalable, maintainable systems.]]></summary></entry><entry><title type="html">Custom Errors in Solidity: A Gas-Efficient Alternative</title><link href="http://localhost:4000/2023/08/22/blockchain-custom-error-solidity/" rel="alternate" type="text/html" title="Custom Errors in Solidity: A Gas-Efficient Alternative" /><published>2023-08-22T00:00:00+09:00</published><updated>2023-08-22T00:00:00+09:00</updated><id>http://localhost:4000/2023/08/22/blockchain-custom-error-solidity</id><content type="html" xml:base="http://localhost:4000/2023/08/22/blockchain-custom-error-solidity/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#custom-error">Custom Error</a></li>
  <li><a href="#how-to-use-custom-errors-in-solidity">How to Use Custom Errors in Solidity</a></li>
  <li><a href="#how-much-gas-is-saved">How Much Gas is Saved?</a></li>
  <li><a href="#comparing-yul-code-custom-errors-vs-string-errors">Comparing Yul Code: Custom Errors vs. String Errors</a></li>
  <li><a href="#decoding-custom-errors-with-ethersjs">Decoding Custom Errors with ethers.js</a></li>
  <li><a href="#caution-external-call--custom-errors">Caution: external call &amp; Custom Errors</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="custom-error">Custom Error</h2>

<p><a href="https://github.com/ethereum/solidity/releases/tag/v0.8.4">Solidity v0.8.4</a> introduced custom errors, a new way to handle errors in smart contracts. Instead of using string-based revert messages, developers can now define error variables and use them efficiently.</p>

<h3 id="why-use-custom-errors">Why Use Custom Errors?</h3>

<ul>
  <li>Lower gas costs compared to traditional string-based errors.</li>
  <li>Reusability in external interfaces or libraries.</li>
  <li>Easier error management across multiple smart contracts.</li>
</ul>

<p>Comparison: String-Based vs. Custom Errors</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Before (Traditional Revert)
</span><span class="nb">revert</span><span class="p">(</span><span class="s">"Insufficient funds."</span><span class="p">);</span> <span class="c1">// No predefined error
</span>
<span class="c1">// After (Custom Error)
</span><span class="n">error</span> <span class="n">Unauthorized</span><span class="p">();</span>   <span class="c1">// Declare the error
</span><span class="nb">revert</span> <span class="n">Unauthorized</span><span class="p">();</span>  <span class="c1">// Use the error
</span></code></pre></div></div>

<h2 id="how-to-use-custom-errors-in-solidity">How to Use Custom Errors in Solidity</h2>

<h3 id="1-using-revert-with-custom-errors">1. Using revert with Custom Errors</h3>

<p>Custom errors function similar to Solidity’s event mechanism, but must be used with the revert statement.</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example: Custom Error for Unauthorized Access
// SPDX-License-Identifier: GPL-3.0
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">4</span><span class="p">;</span>

<span class="n">error</span> <span class="n">Unauthorized</span><span class="p">();</span> <span class="c1">// Custom error
</span>
<span class="k">contract</span> <span class="n">VendingMachine</span> <span class="p">{</span>
    <span class="kt">address</span> <span class="k">payable</span> <span class="n">owner</span> <span class="o">=</span> <span class="k">payable</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">withdraw</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span> <span class="o">!=</span> <span class="n">owner</span><span class="p">)</span>
            <span class="nb">revert</span> <span class="n">Unauthorized</span><span class="p">();</span>  <span class="c1">// Using custom error with revert statement
</span>
        <span class="n">owner</span><span class="p">.</span><span class="nb">transfer</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">).</span><span class="nb">balance</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">revert</code> halts execution and returns the error.</li>
  <li>As of Solidity v0.8.4, <code class="language-plaintext highlighter-rouge">require</code> does not support custom errors (<a href="https://github.com/ethereum/solidity/issues/11278">Issue in github</a>).</li>
</ul>

<p>Equivalent Code Transformation between <code class="language-plaintext highlighter-rouge">revert</code> and <code class="language-plaintext highlighter-rouge">require</code>:</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Traditional require statement:
</span><span class="nb">require</span><span class="p">(</span><span class="n">condition</span><span class="p">,</span> <span class="s">"error message"</span><span class="p">);</span>

<span class="c1">// Translates to:
</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">condition</span><span class="p">)</span> <span class="nb">revert</span> <span class="n">CustomError</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="2-custom-errors-with-parameters">2. Custom Errors with Parameters</h3>

<p>Custom errors can accept parameters, allowing developers to pass relevant data.</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example: Custom Error with Parameters
// SPDX-License-Identifier: GPL-3.0
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">4</span><span class="p">;</span>

<span class="c1">/// Error: Insufficient balance for transfer.
/// @param available balance available.
/// @param required requested amount to transfer.
</span><span class="n">error</span> <span class="n">InsufficientBalance</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">available</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">required</span><span class="p">);</span>

<span class="k">contract</span> <span class="n">TestToken</span> <span class="p">{</span>
    <span class="k">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">uint256</span><span class="p">)</span> <span class="nb">balance</span><span class="p">;</span>

    <span class="k">function</span> <span class="nb">transfer</span><span class="p">(</span><span class="kt">address</span> <span class="n">to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">amount</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">amount</span> <span class="o">&gt;</span> <span class="nb">balance</span><span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">])</span>
            <span class="nb">revert</span> <span class="n">InsufficientBalance</span><span class="p">({</span>
                <span class="n">available</span><span class="o">:</span> <span class="nb">balance</span><span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">],</span>
                <span class="n">required</span><span class="o">:</span> <span class="n">amount</span>
            <span class="p">});</span>

        <span class="nb">balance</span><span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">]</span> <span class="o">-=</span> <span class="n">amount</span><span class="p">;</span>
        <span class="nb">balance</span><span class="p">[</span><span class="n">to</span><span class="p">]</span> <span class="o">+=</span> <span class="n">amount</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>The error is ABI-encoded: <code class="language-plaintext highlighter-rouge">abi.encodeWithSignature("InsufficientBalance(uint256,uint256)", balance[msg.sender], amount)</code>.</li>
  <li>Helps return specific error information to external applications.</li>
</ul>

<h2 id="how-much-gas-is-saved">How Much Gas is Saved?</h2>

<p>Using <a href="https://github.com/IoBuilders/truffle-contract-size">truffle-contract-size</a>, we compared contract sizes with and without custom errors.</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example: Vending Machine Contract
// SPDX-License-Identifier: GPL-3.0
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">4</span><span class="p">;</span>

<span class="n">error</span> <span class="n">Unauthorized</span><span class="p">();</span> <span class="c1">// Custom error
</span>
<span class="k">contract</span> <span class="n">VendingMachine</span> <span class="p">{</span>
    <span class="kt">address</span> <span class="k">payable</span> <span class="n">owner</span> <span class="o">=</span> <span class="k">payable</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">);</span>

    <span class="k">function</span> <span class="n">withdraw</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span> <span class="o">!=</span> <span class="n">owner</span><span class="p">)</span>
            <span class="nb">revert</span> <span class="n">Unauthorized</span><span class="p">();</span>  <span class="c1">// With custom error
</span>            <span class="nb">revert</span><span class="p">(</span><span class="s">"Insufficient funds."</span><span class="p">);</span> <span class="c1">// Without custom error
</span>
        <span class="n">owner</span><span class="p">.</span><span class="nb">transfer</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">).</span><span class="nb">balance</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Contract Size Results:</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Contract Size</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>With Custom Errors</td>
      <td>0.33 KiB</td>
    </tr>
    <tr>
      <td>Without Custom Errors</td>
      <td>0.46 KiB</td>
    </tr>
  </tbody>
</table>

<p>Even for simple errors, custom errors reduce contract size by ~0.13 KiB.
For larger smart contracts, the savings are even more significant.</p>

<h2 id="comparing-yul-code-custom-errors-vs-string-errors">Comparing Yul Code: Custom Errors vs. String Errors</h2>

<p><a href="https://docs.soliditylang.org/en/latest/yul.html">Yul</a> is an intermediate representation for Solidity bytecode.</p>

<h3 id="1-custom-error-revert-unauthorized">1. Custom Error: revert Unauthorized()</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># revert Unauthorized();</span>
<span class="nb">let </span>free_mem_ptr :<span class="o">=</span> mload<span class="o">(</span>64<span class="o">)</span>
mstore<span class="o">(</span>free_mem_ptr, 0x82b4290000000000000000000000000000000000000000000000000000000000<span class="o">)</span>
revert<span class="o">(</span>free_mem_ptr, 4<span class="o">)</span>
</code></pre></div></div>

<ul>
  <li>0x82b42900: Custom error selector.</li>
  <li>Minimal gas cost due to compact encoding.</li>
</ul>

<h3 id="2-string-based-error-revertunauthorized">2. String-Based Error: revert(“Unauthorized”)</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Example: Decoding InsufficientBalance Error</span>
<span class="c"># revert("Unauthorized");</span>
<span class="nb">let </span>free_mem_ptr :<span class="o">=</span> mload<span class="o">(</span>64<span class="o">)</span>
mstore<span class="o">(</span>free_mem_ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000<span class="o">)</span>
mstore<span class="o">(</span>add<span class="o">(</span>free_mem_ptr, 4<span class="o">)</span>, 32<span class="o">)</span>
mstore<span class="o">(</span>add<span class="o">(</span>free_mem_ptr, 36<span class="o">)</span>, 12<span class="o">)</span>
mstore<span class="o">(</span>add<span class="o">(</span>free_mem_ptr, 68<span class="o">)</span>, <span class="s2">"Unauthorized"</span><span class="o">)</span>
revert<span class="o">(</span>free_mem_ptr, 100<span class="o">)</span>
</code></pre></div></div>

<ul>
  <li>0x08c379a0: String error selector.</li>
  <li>More storage operations, higher gas consumption.</li>
  <li>Longer execution time compared to custom errors.</li>
</ul>

<h2 id="decoding-custom-errors-with-ethersjs">Decoding Custom Errors with ethers.js</h2>

<p>Custom errors can be decoded in ethers.js to retrieve detailed error information.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ethers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">ethers</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// Define an interface to match the custom error</span>
<span class="kd">const</span> <span class="nx">abi</span> <span class="o">=</span> <span class="p">[</span>
  <span class="dl">'</span><span class="s1">function InsufficientBalance(uint256 available, uint256 required)</span><span class="dl">'</span><span class="p">,</span>
<span class="p">];</span>

<span class="kd">const</span> <span class="kr">interface</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">Interface</span><span class="p">(</span><span class="nx">abi</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">error_data</span> <span class="o">=</span>
  <span class="dl">'</span><span class="s1">0xcf479181000000000000000000000000000000000000</span><span class="dl">'</span> <span class="o">+</span>
  <span class="dl">'</span><span class="s1">0000000000000000000000000100000000000000000000</span><span class="dl">'</span> <span class="o">+</span>
  <span class="dl">'</span><span class="s1">0000000000000000000000000000000000000100000000</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">decoded</span> <span class="o">=</span> <span class="kr">interface</span><span class="p">.</span><span class="nx">decodeFunctionData</span><span class="p">(</span>
  <span class="kr">interface</span><span class="p">.</span><span class="nx">functions</span><span class="p">[</span><span class="dl">'</span><span class="s1">InsufficientBalance(uint256,uint256)</span><span class="dl">'</span><span class="p">],</span>
  <span class="nx">error_data</span>
<span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
  <span class="s2">`Insufficient balance for transfer. `</span> <span class="o">+</span>
  <span class="s2">`Needed </span><span class="p">${</span><span class="nx">decoded</span><span class="p">.</span><span class="nx">required</span><span class="p">.</span><span class="nx">toString</span><span class="p">()}</span><span class="s2"> but only `</span> <span class="o">+</span>
  <span class="s2">`</span><span class="p">${</span><span class="nx">decoded</span><span class="p">.</span><span class="nx">available</span><span class="p">.</span><span class="nx">toString</span><span class="p">()}</span><span class="s2"> available.`</span>
<span class="p">);</span>
<span class="c1">// Output: Insufficient balance for transfer. Needed 4294967296 but only 256 available.</span>
</code></pre></div></div>

<ul>
  <li>ethers.js can decode ABI-encoded errors for better debugging.</li>
  <li>Error parameters are extracted and converted into human-readable messages.</li>
</ul>

<h2 id="caution-external-call--custom-errors">Caution: external call &amp; Custom Errors</h2>

<h3 id="smart-contract-compilation--external-calls">Smart Contract Compilation &amp; External Calls</h3>

<p>When compiling a contract:</p>

<ul>
  <li>The Solidity compiler includes all defined custom errors in the contract’s ABI.</li>
  <li>However, external calls do not include errors from other contracts.</li>
</ul>

<h3 id="security-concern-manipulated-error-messages">Security Concern: Manipulated Error Messages</h3>

<ul>
  <li>Malicious contracts can fake errors by crafting misleading return messages.</li>
  <li>Developers must verify whether the error originates internally or externally.</li>
  <li>Use <a href="https://docs.soliditylang.org/en/latest/natspec-format.html">NatSpec</a> documentation to provide clear explanations for custom errors.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Why Use Custom Errors:</p>

<ul>
  <li>Lower Gas Costs – Reduces contract size &amp; execution gas.</li>
  <li>Improved Debugging – Encodes detailed error information.</li>
  <li>Better Maintainability – Centralized error management across contracts.</li>
  <li>Efficient ABI Encoding – Works seamlessly with Solidity tooling &amp; ethers.js.</li>
</ul>

<p>When Should You Use Custom Errors:</p>

<ul>
  <li>Large contracts with complex logic.</li>
  <li>Contracts where gas efficiency is critical.</li>
  <li>Reusable libraries and interfaces.</li>
</ul>]]></content><author><name>wonjoon</name></author><category term="ethereum" /><summary type="html"><![CDATA[By adopting custom errors, Solidity developers can write more efficient and scalable smart contracts, saving gas and improving contract execution..]]></summary></entry></feed>