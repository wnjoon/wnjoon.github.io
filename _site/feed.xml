<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-10-29T17:40:42+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">blog.wonjoon</title><subtitle>A blog about software engineering, blockchain, and other development topics.
</subtitle><author><name>Wonjoon</name></author><entry><title type="html">회고록:10월</title><link href="http://localhost:4000/2025/10/29/retrospect/" rel="alternate" type="text/html" title="회고록:10월" /><published>2025-10-29T00:00:00+09:00</published><updated>2025-10-29T00:00:00+09:00</updated><id>http://localhost:4000/2025/10/29/retrospect</id><content type="html" xml:base="http://localhost:4000/2025/10/29/retrospect/"><![CDATA[<h2 id="추석">추석</h2>

<p>10월에는 한국 고유의 명절 추석이 있었다. 올해 추석은 휴일을 포함해서 약 10일간 쉴 수 있는 시간이었는데, 마침 아내가 직장에서 대기발령을 하라는 요청을 받아서 부득이(?)하게 명절내내 본가에 내려가지 않았다.</p>

<p>사실 나는 ‘명절때 조부모댁에 가지 않고 집에 머무르는 것’을 엄청나게 하고싶어했다. 우리 집에서는 상상도 못할 일이었고, 내 기억에 고3 수험생 시절과 피치못한 사정이 아니고서는 항상 추석에는 조부모댁에 갔었다. 심지어 기억나는 ‘피치못할 사정’에는 해외에 있는 바람에 가지 못한 경우 뿐이었던 것 같다.</p>

<p>아내는, 사실 본인의 의지와 전혀 관련없는 대기발령이었지만, 나에게 굉장히 미안해했다. 혼자서라도 본가에 다녀오고싶으면 그렇게 하라고 했지만, 나는 단칼에 거절했다. 37년을 살면서 처음으로 아무런 문제 없이 추석에 집에만 있을 수 있는 시간인데, 부모님께는 조금 죄송하지만 정말 행복했다.</p>

<p>다행이 아내가 출근하는 상황은 아니었기 때문에, 원래는 날씨 좋은날에 등산도 가고 맛있는것도 먹으러 가려고 했다. 하지만 이것도 하늘의 장난인지, 이번 추석에는 비가 정말 많이 왔다. 날씨가 좋은적이 없었다. 덕분에 집에서 내내 쉬게 되었고, 이 때문에 <a href="#고스트-오브-요테이">절대 손을 대서는 안될 녀석</a>을 시작하고야 말았다.</p>

<h2 id="고스트-오브-요테이">고스트 오브 요테이</h2>

<p>10월 2일. 내가 생각하기엔 매우 계획적인 날짜인 추석의 시작일에, 플레이스테이션 게임이 발매되었다. 꽤 많은 사람들이 역작이라고 표현하였고, 최근에 재미있게 보던 유투버가 이 게임을 리뷰하는것(<a href="https://youtu.be/UfHoEuXIiRU?si=QIzXEQgBsvvNiNvc">영상</a>)을 보게 되면서 ‘추석에 딱히 할것도 없는데 게임이나 해볼까?’ 하는 정말 발칙한 생각을 하게 되었다.</p>

<blockquote>
  <p>참고로 이 유튜버의 <a href="https://youtu.be/-Zk-WyCoIbU?si=2XPvY2ygu3_S7oGi">영상</a>을 재미있게 보고나서, 좋은 핸드폰이 필요없다고 아이폰 13 미니의 배터리를 교체하려던 아내가 17 프로를 구매해버렸다.</p>
</blockquote>

<p><img src="https://i.namu.wiki/i/6sQwLV8r1RxNIhUMPuxHg9iA3B42_2QQbA43Fheemfpy-Cgmz2OHFgDqDHyBBBtwafzmrD6e6Lzcy1H4u7MR4by2edThhgozVKCsLyEQnh78qbrwr2is3aseVAi9dlWTXH8H6Z1mdW-CqYCp3iF6ZQ.webp" alt="image" /></p>

<p>원래 이번 추석에는 책과 강의를 열심히 들으면서 나의 실력을 마음껏 향상시키는 상상을 하고 있었는데, 연휴에 마냥 재미없게 보내는것도 잘못된 생각인것만 같아 거금을 주고 게임을 구매했다. 사람들이 여주 얼굴이 못생겨서 게임하기 싫다고하는데, 나는 그냥 괜찮게 생겼다고 생각한다.</p>

<p>길게 말할 필요 없이, 약 4-5일가량을 하루에 7시간 가까이 게임에 빠져버렸다. 심지어 이 게임은 본 스토리만 있는게 아니라 주변에 발생하는 여러 서브스토리들이 많은데, 추석 연휴기간동안 본편 스토리를 포함해서 대략 60%에 달하는 이야기를 완주해버렸다.</p>

<blockquote>
  <p>현재는 대략 61시간의 게임 플레이와 85%의 트로피를 완료했다. 더이상은 하면 안될것 같다.</p>
</blockquote>

<h2 id="공유-오피스">공유 오피스</h2>

<p>그래서였을까, 10월 중순이 넘어가면서 문득 이번달에 내가 뭘 했는지 도저히 생각이 나지 않았다. 아내에게 진지하게 고민을 털어놓으니, 우선 추석 연휴가 길어서 실제로 일한 시간이 적어서고, 두번째는 계속 재택을 하다보니 점점 집에서 일이 잘되는 시간보다 무기력하게 지내는 시간이 늘어나는 것 같다고 했다.</p>

<p>사실 재택을 하게되면 ‘내가 집중할 수 있는 시간을 최대한으로 사용할 수 있다’는 엄청난 장점이 있다. 물론 출퇴근에 낭비되는 시간과 체력도 없고, 그로인해 받는 스트레스도 현저히 적다. 하지만 이 장점 이면에는 내가 그만큼 집중하는 시간을 만들어서 효율적으로 사용해야 한다는 압박도 있다.</p>

<p>이러면 안된다는 생각에 이것저것 알아보다가 <a href="https://fivespot.io/">파이브스팟</a>에서 운영하는 무제한 공유오피스 입장권을 구매했다. 이걸 사용하면 전국에 약 250개 가까이 되는 제휴 카페, 공유오피스, 그리고 패스트파이브에서 운영하는 파이브스팟 오피스를 마음껏 이용할 수 있다. 나는 집에서 대략 차로 10분정도 걸리는 고척점과 그나마 가까운 영등포점, 여의도점을 주로 이용하고 있다. 확실히 카페에서 하는것보다 훨씬 안정적이고 쾌적하다. 그리고 모두가 집중하고 있는 공간에서 같이 집중하다보니 일의 효율도 훨씬 높아졌다. 매달 들어가는 돈이 대략 15만원정도 되는데, 이 돈을 아까워하는 것보다 15만원어치의 효율과 더 많은 기회를 찾아보라는 아내의 현명한 대답이 기억난다. 역시 현명한 아내는 남편을 성장하게 한다.</p>

<blockquote>
  <p>참고로 추천인 코드를 입력하면 가입 시 할인받을 수 있다: <strong>S1VCY4</strong></p>
</blockquote>]]></content><author><name>Wonjoon</name></author><category term="essay" /><summary type="html"><![CDATA[10월에는 한국 고유의 명절 추석으로 인해 자그마치 10일간의 휴일이 있었다. 그래서 그런가, 10월은 너무 빠르게 지나갔다. 내가 무엇을 했는지 기억하지도 못할정도로.]]></summary></entry><entry><title type="html">회고록:9월</title><link href="http://localhost:4000/2025/09/30/retrospect/" rel="alternate" type="text/html" title="회고록:9월" /><published>2025-09-30T00:00:00+09:00</published><updated>2025-09-30T00:00:00+09:00</updated><id>http://localhost:4000/2025/09/30/retrospect</id><content type="html" xml:base="http://localhost:4000/2025/09/30/retrospect/"><![CDATA[<h2 id="uniswap-강의-참여">Uniswap 강의 참여</h2>

<p>8월말이었나, 링크드인에 아래와 같은 포스트가 올라왔다. 먼저 나는 저 사람을 당시에는 몰랐고, 누군가가 좋아요를 눌렀던 탓에 나에게도 피드가 뜬것 같았다.</p>

<p><br /></p>

<p><img src="https://velog.velcdn.com/images/wnjoon/post/53b25df3-0cd3-422a-97cf-247094319dfe/image.png" alt="image" /></p>

<p><br /></p>

<p>올해 5월 이후로 블록체인과 관련된 커리어를 쌓고 있지는 않지만, 그래도 약 6년간 몸담았던 분야다보니 계속해서 관심을 갖고는 있었다. 그러던중 평소에 배우고싶었던 Uniswap이라는 프로젝트에 대한 무료 강의가 나에게 노출되었고, 정말 아무런 고민도 없이 신청했다.</p>

<p>강의는 4주동안 진행되었고, 매주 <strong>생각보다 시간을 많이 소요하는</strong> 과제들이 부여되었다. 스마트 컨트랙트 개발할 때 Truffle, Hardhat만 사용해봤는데, 이번에 Foundry의 사용법에 대해서도 배울 수 있었고, Uniswap의 동작 방식에 대해서도 이해할 수 있었다. 직접 AMM을 스마트 컨트랙트로 구현해보았고, 구현한 컨트랙트를 사용해서 직접 토큰을 교환할 수 있는 웹페이지도 만들어보았다. <a href="https://wnjoon.github.io/2025/09/15/miniamm-dapp-with-ai/">이전 포스트 ‘백엔드 개발자의 AI로 아주 작은 dApp 만들기’</a>에서도 적었듯이, 프론트엔드에 대해 경험이 없었던 나에게 이번 강의에서 진행된 모든 과제들은 정말 많은 도움이 되었다.</p>

<p>사실 강의만큼이나 과제를 만드는 것이 정말 쉽지 않은 부분인데, 좋은 마음으로 모든것을 정말 좋은 퀄리티로 제공해준 <a href="https://www.linkedin.com/in/7oelm/">Joel Mun</a>님께 <em>비록 이 글을 보지 않겠지만</em> 다시한번 감사의 인사를 전하고싶다. 기대에 부응(?)하기 위해 정말 열심히 과제를 했고, 최종적으로 이번 강의의 수료자로 이름이 올라갔고 졸업생 채널에 초대되었다 🎉.</p>

<p><br /></p>

<p><img src="https://velog.velcdn.com/images/wnjoon/post/d762c192-5e0f-46d9-970c-c0f58c34e748/image.png" alt="image" /></p>

<p><br /></p>

<h2 id="밋업-더하기-밋업은-밋업의-연속">밋업 더하기 밋업은 밋업의 연속</h2>

<p>5월부터 일하고있는 회사가 전면적으로 재택이 가능하다보니, 1주일동안 나가는 횟수도 거의 없고 심지어 만나는 사람도 없는 경우가 많았다. 지난달에는 내가 사람좀 만나고 다녔으면 좋겠다는 아내의 바램에 따라 <a href="https://www.careerday.jobs/club">커리어데이에서 운영하는 디너클럽</a>에도 참석했다.</p>

<blockquote>
  <p>디너클럽에 대한 후기는 나중에 올릴지 모르겠지만, 정말 좋은 시간이었다. 특히 다양한 직업 속에서 공통된 주제들이 나올 수 있을 법한 사람들을 어떻게 이렇게 모아줄 수 있는지 신기했다. 혹은 모든 직장인이 비슷한 관심거리를 갖고있어서는 아니었을까 하는 생각도 든다.</p>
</blockquote>

<p>특히 아내는 개발자들이 밋업을 통해 공통된 관심사와 주제를 가지고 만난다는 것을 좋아했다. 그래서 나에게도 밋업이 있으면 자주 나가서 사람들과 교류하고 인사이트를 얻고 오기를 바랬는데, 문제는 코로나 이후로 예전만큼 밋업이 활발하지 않았고, 그마저도 내가 관심있는 주제들에 대해 열린 밋업은 열리지 않았다.</p>

<p>그런데 신기하게도 이번 9월은 내가 관심있는 밋업들이 정말 많이 열렸다. 밋업과 북토크를 포함해서 무려 5개의 모임에 참석했다.</p>

<p><strong>ZZIN’ Web3 Builders 2025</strong></p>

<p>위에서 언급한 Uniswap 강의를 진행한 Joel님과 블록체인 빌더에서 꽤 이름이 있는 <a href="https://www.linkedin.com/in/learner-bora/">Bora</a>님이 주최한 ‘Web3 개발자 지망생을 위한 밋업’에 참여했다. 사실 Web3 커뮤니티에 큰 관심이 있는것은 아니었지만, 강의를 진행한 Joel님이 헬퍼를 모집하면서 뭔가 도움을 줄 수 있을것 같아 참여했다 (사실 Web3 개발자가 되기 위한 사람들에게 도움을 주기 위한 모임이라는 것을 밋업 당일에 알았다).</p>

<p>생각이상으로 많은 사람들(약 100명 이상)이 참여했는데, 헬퍼로 돌아다니면서 이런저런 이야기도 귓동냥으로 듣고 링크드인에서만 보던 사람들과 인사도 하는 좋은 시간이었다. 특히 평소에 관심이 많은 스테이블코인에 대해 유명한 책도 쓰신 분이 참여하셨는데, 덕분에 아래에 언급할 북토크에도 참여할 수 있는 기회도 생겼다.</p>

<p><strong>북토크: 스테이블코인의 시대</strong></p>

<p>최근에 스테이블코인에 대해 나온 책중 ‘스테이블코인의 시대’라는 책의 저자인 <a href="https://www.linkedin.com/in/seon-min-yi-21a741151/">Seon Min Yi</a>님이 주최한 북토크에 참여했다. 사실 참여하게 된 계기가 좀 재미있는데, ‘ZZIN’ Web3 Builders 2025’ 밋업에 작가님이 참여하신걸 보고 인사를 드리고 싶었으나, 너무 인기가 많으셔서 멀리서만 지켜볼 수 밖에 없던게 아쉬워서, 밋업이 끝난 후에 개인적으로 링크드인 메시지를 드렸다.</p>

<p><br /></p>

<p><img src="https://velog.velcdn.com/images/wnjoon/post/cd07299c-69c5-4a8c-84df-434de285112b/image.png" alt="image" /></p>

<p><br /></p>

<p>마지막에 ‘시간이 괜찮으시면 커피챗을 꼭 하고싶다’고 적었는데, 반대로 작가님께서 이번 북토크가 이미 신청은 마감되었지만 와도 된다고 자리를 열어주셔서 기쁜 마음에 참여할 수 있었다. 역시 두드린 사람만이 기회를 잡을 수 있다는 생각이 들었다.</p>

<p>사실 나는 스테이블코인에 대해 계속해서 의문을 가지고 있다. CBDC, 토큰증권 등 여러 블록체인 프로젝트를 지나면서 생긴 의심이랄까. 혹은 ‘그래서 스테이블코인, 특히 원화 스테이블코인이 꼭 필요한 이유는 뭐야?’는 질문의 답변을 할 정도로 아직 지식이 부족하기 때문이라고 생각했다. 이번 북토크에도 중간에 패널 토론 시간이 있었고, 나서기 좋아하는 성격상 손을 들고 질문했다.</p>

<p>“스테이블코인이 발행되면 국채 매입을 통한 국가 재정이 늘어나기 때문에 국가 입장에서는 좋을 것 같은데요, 그럼 스테이블코인 발행을 통한 기업과 우리같은 사용자들은 뭐가 좋아지나요?”</p>

<p>아뿔사, 앞에 ‘원화’를 붙이는 것을 잊었다. 패널 모더레이터분은 “USDT, USDC가 얼마나 돈을 버는지 먼저 말씀드려야 할 것 같은데요?” 라고 말씀하셨지만, 그건 나도 알고 있는 사실이었다. 나서기 좋아하지만 질문할때 항상 긴장하는 성격탓에 어떻게 질문할지 적어놓고도 핵심적인 내용이 비어있는 질문을 하고 말았다. 어찌되었든 작가님을 포함한 패널분들은 나의 질문에 매우 성심성의껏 답변해주셨다.</p>

<p>그런데 이 북토크에서 가장 의미있던 시간은, 사실 북토크가 모두 종료되고 사인회가 열리는 도중이었다. 사인회가 있을거라고 생각하지 못하고 구매한 책을 집에 두고왔지만, 그래도 이런 자리를 참여하게 해주신 작가님께 고마운 마음이 있어 꼭 인사를 드리고 집에 돌아가야겠다고 생각했다. 하지만 사인 줄이 생각보다 길어서 좀 기다리는 중이었는데, 패널 토론자였던 <a href="https://www.linkedin.com/in/junyoung-jeong-703306113/">Junyoung Jeong</a> 님께서 먼저 인사를 걸어주셨다. 서로 인사를 나누고 이야기를 하던도중, 갑자기 내가 정말로 궁금했던 질문이 입밖으로 나왔다.</p>

<p>“스테이블코인이 요즘 다시 부상하고있는데, 다시 블록체인 개발자로 돌아가야할까요?”</p>

<p>사실 최근에 스테이블코인이 다시 부상하면서, 꽤 많은 블록체인 기업에서 면접 제안을 받는다. 뒤에서도 이야기하겠지만, 나는 앞으로 특정 분야에 전문성을 갖는 개발자가 아닌 AI를 활용해서 목표하는 바를 명확하게 계획하고 이를 에이전트에게 정확하게 지시하고 돌아오는 결과에 대해 검토하고 제대로 질문하는 개발자가 필요한 시대가 오고 있다고 생각한다. 이러한 생각을 하게 된 계기에 대해서는 나중에 따로 포스팅할 기회가 있으면 좋겠지만, 그러다보니 ‘내가 생각한 방식대로 앞으로 나아가야할지, 아니면 시대의 흐름에 다시 몸을 맡겨야할지’에 대한 고민이 있었던 것이다.</p>

<p>그런데 돌아온 대답은 굉장히 간단했다.</p>

<p>“아니요. 결국 스테이블코인은 비지니스가 중요할겁니다.”</p>

<p>앞으로의 개발자의 방향성에 대해 내가 생각하고 있는 바가 틀릴수도 있다. 하지만 이 대답을 통해 그 결심을 믿고 앞으로 계속 나아보기로 했다.</p>

<p><strong>AI 밋업 3종세트</strong></p>

<p>9월 한달동안 KBW(Korea Blockchain Week) 2025의 영향으로 수많은 블록체인 관련 밋업들이 열렸는데, 그 안에서도 AI에 대한 알짜배기 밋업들이 있었다.</p>

<p>나는 AI 자체의 기술에는 관심이 없다. 그 분야는 이미 엄청난 전문가들이 있고, 내가 이 사람들보다 더 뛰어난 AI 엔지니어가 될 것이라고 생각하지는 않는다. 다만 AI 에이전트를 잘 다루는 개발자, 그리고 AI 에이전트를 잘 만드는 개발자가 되는것은 충분히 시도할만하다고 생각한다. 특히 지금 회사에서 AI 에이전트를 만드는 계획도 있었기 때문에, 이와 관련된 밋업들이 생기면 바로 신청해서 다녀왔다.</p>

<p>특히 Claude Code에 대해 많은 관심이 있었다. ChatGPT, Gemini도 충분히 업무에서 활용하고 있었고 심지어 IDE는 Windsurf를 사용하고 있었지만, 많은 개발자들이 Claude Code를 사용하고 있었고 심지어 일부는 $200 달러를 매달 지불하면서 대부분의 업무를 AI 에이전트를 통해 처리한다는 것이 흥미로웠다. 그래서 이번달 초에 $100 요금제를 구독했는데, 막상 구독하고보니 어떻게 이걸 효율적으로 쓸 수 있는지 모르는 상태다보니 아까운 내 구독료만 낭비되고 있다는 생각이 들었다.</p>

<p>그래서 총 3군데의 AI 관련 밋업에 참석했다. <strong>AWSKRUG, Claude Code Seoul</strong> 밋업에서는 Claude Code를 사용하는 방법에 대한 인사이트를 얻을 수 있었다. 그리고 <strong>AI Builder Seoul</strong> 밋업에서는 실제로 AI 에이전트를 구축하고 이를 통해 서비스를 만들어본 경험에 대해서 배울 수 있었다.</p>

<p><br /></p>

<p><img src="https://velog.velcdn.com/images/wnjoon/post/2a585316-12f0-4313-9407-4f0a8177de7d/image.png" alt="" /></p>

<p><br /></p>

<p><img src="https://velog.velcdn.com/images/wnjoon/post/3f7f1ab4-a91e-4e00-bcf8-4f1975ee7fa0/image.png" alt="" /></p>

<p><br /></p>

<p>3군데 밋업 모두에서 느낀 내용을 종합해서 정리해보면,</p>
<ul>
  <li>대부분의 개발자들은 AI에게 단순한 질문으로부터 얻은 코드를 복사하고 붙여넣기 하고있다. 이것은 단순히 ‘내 수고로움을 줄이는 노동의 감소’의 의미 이상이 되지 않는다.</li>
  <li>하지만 AI를 정말 잘 사용하는 상위 1%의 개발자들은, AI를 또한명의 직원으로 고용한것처럼 사용한다. 계획하고 검토하는 인간의 일을 수행할 뿐, 모든 노동 작업들을 AI를 통해 수행한다.</li>
  <li>이를 위해 ‘정말로 잘 설명하고, 계획하고, 작업을 지시하는’ 연습이 필요하다. 이것은 단순히 기술 사용의 능숙함이 아니라, 만들고자 하는 상품에 대해 명확하고 빠르게 이해하고 이를 잘 지시할 수 있는 능력이다. 결국에는 AI가 있다고 해서 새로운 기술이 필요한게 아니다. 뛰어난 시니어 개발자가 되는 기준은 변한게 없다. 단지 시니어 개발자가 되는 기간이 전보다 훨씬 짧아졌을 뿐이다.</li>
</ul>

<blockquote>
  <p>밋업에 대해 조금 더 자세히 정리한 내용은 브런치에 올린 포스트 <a href="https://brunch.co.kr/@wallee/26">Meetup에 푹 절여진(?) 한주</a>를 참고해주세요.</p>
</blockquote>

<h2 id="50만원-그까이꺼">50만원. 그까이꺼!</h2>

<p>위에서 말한 AI 에이전트를 잘 사용하는 방법과, AI 에이전트를 구축하는 방법을 알기 위해 강의와 책을 구매했다. 강의는 NomadCoder의 <a href="https://nomadcoders.co/ai-agents-masterclass">AI Agents 마스터클래스</a>이고, 책은 <a href="https://product.kyobobook.co.kr/detail/S000217402731">한 걸음 앞선 개발자가 지금 꼭 알아야 할 클로드 코드</a>이다. 총 50만원 정도가 들었는데, 돈이 아깝지 않으려면 정말 열심히 들어야겠다 💸. 10월안에 강의와 책 모두 끝내려고 한다.</p>

<p>나는 배움에 대해 조금 인색(?)한 편이다. 특히 개발자와 관련된 학습은 유튜브나 인터넷에서 무료로 할 수 있는게 많아서 그런것 같다. 하지만 결국 좋은 정보를 찾는 과정에서 시간도 낭비되고 무료 강의인 경우 대부분은 품질이나 내용이 좋지 않거나 마지막에는 유료 강의 등록을 요구하는 경우들이 많다는 생각에, 적지 않지만 앞으로의 발전을 위해 과감하게 구매했다.</p>

<h2 id="수영-시작">수영 시작</h2>

<p>어렸을때 수영 선수반까지 할정도로 나는 수영을 좋아한다. (대전에서도 안했지만) 서울에 올라와서도 수영을 하고싶어서 여러곳을 찾아다녔지만, 회사 시간도 그렇고 등록하기도 어려워서 하지 못했었다. 그러다가 최근 집 근처에 있는 문화체육센터에서 진행하는 새벽 수영 등록에 성공했고, 일주일에 3번 아침 7시부터 한시간동안 수영을 하고있다. 최근에는 <strong>이유는 잘 모르지만</strong> 어렸을때 성장에 방해된다는 이유로 배우지 못했던 접영을 배우기 시작했다. 참고로 나는 선수반까지 했지만, 접영은 전혀 할 줄 모르는 상태였다.</p>

<h2 id="재택근무-이후에-생긴-익숙해짐과-나태해짐-그-사이">재택근무 이후에 생긴 익숙해짐과 나태해짐 그 사이</h2>

<p>확실히 재택근무를 하면 업무에 집중할 수 있는 시간을 내가 선택할 수 있다는 장점이 있다. 가장 좋은 상황은 아침 일찍부터 업무의 몰입에 들어간 상태인데, 이동하는 시간, 누군가와 점심을 먹는 시간 등 몰입을 방해할만한 요소들이 전부 제거되기 때문에 하루 종일 일에 완전히 몰두한 상태로 엄청나게 높은 퍼포먼스를 발휘할 수 있다.</p>

<p>하지만 이와 완전히 반대되는 상황은, 아침에 몰두하지 못한 상태를 혼자서 이겨내야하고, 이를 이겨내지 못하면 위에서 얻은 것만큼 최적의 퍼포먼스를 낼 수 없다는 것이다. 책 ‘<a href="https://product.kyobobook.co.kr/detail/S000211596949">개발자, 오늘도 마음 튼튼하게 성장하기</a>‘에서는 아침에 잠시 밖에 산책을 다녀오는 것처럼 ‘출근을 모방하는 태도’를 루틴으로 만드는 것을 추천했다.</p>

<p>결국 어떤 방법이던지 루틴을 만드는 것이 굉장히 중요한데, 앞으로 해외에서 일하게 될 상황을 고려할때 이러한 습관을 만드는 연습은 꼭 필요하다고 생각했다. 몸이 편한 것에 안주하는 것이 아니라, 내가 사용할 수 있는 시간이 늘어났다는 것에 더 집중하는 태도가 필요한 것 같다.</p>

<p>이제 2025년도 3분기가 지나고, 총 3개월만 남았다. 남은 시간도 더 많이 경험하고 성장하자!</p>]]></content><author><name>Wonjoon</name></author><category term="essay" /><summary type="html"><![CDATA[2025년 9월도 순식간에 지나갔다. 이번 9월은 벌여놓은 일도 많았고, 실제로 해본일도 많은 좋은 시간이었다. 앞으로 나는 어떤 개발자가 되어야할까. 찾으면 찾을수록 맞는길인지 모르지만 적어도 확신이 조금씩 들어가는것 같다.]]></summary></entry><entry><title type="html">vim에서 esc를 누르면 자동으로 영문으로 바꿔주기 with Hammerspoon</title><link href="http://localhost:4000/2025/09/21/auto-lang-updated-when-esc-using-hs/" rel="alternate" type="text/html" title="vim에서 esc를 누르면 자동으로 영문으로 바꿔주기 with Hammerspoon" /><published>2025-09-21T00:00:00+09:00</published><updated>2025-09-21T00:00:00+09:00</updated><id>http://localhost:4000/2025/09/21/auto-lang-updated-when-esc-using-hs</id><content type="html" xml:base="http://localhost:4000/2025/09/21/auto-lang-updated-when-esc-using-hs/"><![CDATA[<h2 id="왜-계속-mode-적용이-안됐지">왜 계속 mode 적용이 안됐지?</h2>

<p>개발자라면 영어를 사용해서 주석을 작성하는것이 당연히 좋겠지만, 사실 한국인의 경우에는 모국어로 주석을 다는것만큼 빠르고 편리한 것이 없죠. 저도 되도록이면 영어를 사용하려고 노력하지만, 지금같이 포스팅을 작성하거나 제가 빠르게 이해하기 위한 글이나 주석을 작성할 때에는 일반적으로 한국어를 사용하곤 합니다.</p>

<p>지난번 포스팅 <a href="https://wnjoon.github.io/2025/09/17/vim-vscode-extenstion/">Claude Code를 활용한 vim cheatsheet vscode extension 개발기</a>에서 말했듯이, 저는 항상 vim을 사용해서 멋지게(?) 개발하고싶은 욕심이 있습니다. 단축키가 잘 외워지지 않아 오히려 생산성을 떨어트리는 것 같아서 이를 도와줄 수 있는 <a href="https://marketplace.visualstudio.com/items?itemName=xonxoon.quick-vim-cheatsheet">vscode 기반 extension</a>을 만들기도 했죠.</p>

<p>하지만 vim을 사용하기 어렵게 만드는 또 다른 이유가 있었는데 바로 ‘한/영 전환’입니다. vim은 normal/insert/visual 모드를 지원하고 있고, 명령어들은 normal, visual 모드에서 동작합니다. 명령어를 입력하기 위한 상태로 가려면 insert -&gt; normal/visual 모드로 전환해야 하는데 이때 vim은 영문 단어를 이해합니다.</p>

<p>그러다보니 한글로 열심히 글을 적다가 모드를 바꾸게 되면 한글이 계속 인식되어서 한영전환을 한번 더 해줘야 하는데 이는 굉장히 번거롭고 생산성을 저하시킵니다. 이 문제를 해결할 수 있는 방법을 찾다가 <a href="https://www.hammerspoon.org/">hammerspoon</a>을 사용해서 해결할 수 있다는 것을 발견하여 공유합니다.</p>

<h2 id="hammerspoon">Hammerspoon</h2>

<p>Hammerspoon은 Lua라는 스크립트를 사용해서 MacOS의 일부 기능을 제어할 수 있도록 하는 도구입니다. 사용자는 스크립트 작성을 하고 이를 적용해서 OS와 어플리케이션 간에 발생하는 동작 사이에 Hook을 넣거나, 지금처럼 특정 버튼이 눌렸을때 원하는 커스텀 동작이 수행되도록 할 수 있습니다.</p>

<p>설치는 <a href="https://github.com/Hammerspoon/hammerspoon/releases/tag/1.0.0">이곳</a>에서 할 수 있습니다.</p>

<h2 id="스크립트-작성-및-적용-방법">스크립트 작성 및 적용 방법</h2>

<p>Hammerspoon을 설치하면 메뉴바에 망치모양의 아이콘이 표시됩니다.</p>

<ul>
  <li>Open Config: Hammerspoon은 기본적으로 <code class="language-plaintext highlighter-rouge">~/Users/&lt;YOUR_USERNAME&gt;/.hammerspoon/init.lua</code> 파일을 통해 스크립트를 설정할 수 있습니다. 해당 메뉴는 이 설정 파일을 불러옵니다.</li>
  <li>Reload Config: <code class="language-plaintext highlighter-rouge">~/Users/&lt;YOUR_USERNAME&gt;/.hammerspoon/init.lua</code> 파일에 작성된 설정값으로 Hammerspoon을 재시작합니다. 변경된 스크립트를 즉시 적용할 때 사용합니다.</li>
  <li>Console: Hammerspoon의 콘솔을 열어 스크립트를 실행하거나 디버깅할 때 사용합니다.</li>
</ul>

<p>이 외에도 몇가지 메뉴들이 있지만, 일반적인 다른 앱들과 동일한 성격을 가집니다.</p>

<h2 id="스크립트-적용하기">스크립트 적용하기</h2>

<p><strong>1. 특정 앱에서만 동작할 것</strong></p>

<p>제가 목표하는 것은 ‘vscode에서 vim 작업을 하기 위해 esc 키를 눌렀을때 자동으로 영문으로 전환되도록 하는 것’입니다. 기존에는 karabiner를 이용해서 esc를 눌렀을때 무조건 한/영 전환이 되도록 설정했었는데요, 이렇게 하니 vscode와 무관하게 실제로는 한/영 전환이 필요하지 않은 어플리케이션에서도 한/영 전환이 되어버렸습니다.</p>

<p>hammerspoon에서는 스크립트를 이용하여 이러한 부분을 세밀하게 조정할 수 있었기 때문에, <code class="language-plaintext highlighter-rouge">targetAppBundleID</code>를 이용하여 vscode에서 esc 키를 눌렀을때만 영문으로 전환되도록 설정할 수 있습니다.</p>

<p>원하는 어플리케이션의 bundle ID를 확인하는 방법은 여러가지가 있는데요, 저는 hammerspoon의 console을 이용해보기로 했습니다. 아래의 코드를 콘솔에 넣으면 5초 후에 가장 앞에있는(활성화 되어있는) 앱의 bundle ID를 출력해줍니다.</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- print the bundle ID of the frontmost application after 5 seconds</span>
<span class="n">hs</span><span class="p">.</span><span class="n">timer</span><span class="p">.</span><span class="n">doAfter</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
  <span class="kd">local</span> <span class="n">app</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">frontmostApplication</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">app</span> <span class="k">then</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"Bundle ID of frontmost application: "</span> <span class="o">..</span> <span class="n">app</span><span class="p">:</span><span class="n">bundleID</span><span class="p">())</span>
    <span class="n">hs</span><span class="p">.</span><span class="n">alert</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="s2">"Bundle ID: "</span> <span class="o">..</span> <span class="n">app</span><span class="p">:</span><span class="n">bundleID</span><span class="p">())</span>
  <span class="k">else</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"Could not find the frontmost application."</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span><span class="p">)</span>
</code></pre></div></div>

<p>처음에는 5초 후에 실행하는 조건을 넣지 않았었는데, 이렇게하니 console창의 bundle ID, 즉 hammerspoon의 bundle ID가 출력되었습니다. 그래서 console에 명령어를 넣고 원하는 앱을 누를 수 있을 정도의 여유로운 시간(사실 5초는 좀 길긴 합니다)을 설정해주었습니다.</p>

<p>저는 실제로 Windsurf를 사용하기 때문에, <code class="language-plaintext highlighter-rouge">com.exafunction.windsurf</code>가 출력되는 것을 확인할 수 있었습니다.</p>

<p><strong>2. 스크립트 적용하기</strong></p>

<p>위에서 얻은 bundle ID를 이용하여 스크립트를 작성했습니다.</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- ID of the target application.</span>
<span class="kd">local</span> <span class="n">targetAppBundleID</span> <span class="o">=</span> <span class="s2">"com.exafunction.windsurf"</span>

<span class="c1">-- If a listener already exists upon reloading the config, stop it to prevent conflicts.</span>
<span class="k">if</span> <span class="n">escape_keyevent</span> <span class="k">then</span>
    <span class="n">escape_keyevent</span><span class="p">:</span><span class="n">stop</span><span class="p">()</span>
<span class="k">end</span>

<span class="c1">-- Create a new event tap listener for key down events.</span>
<span class="n">escape_keyevent</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">eventtap</span><span class="p">.</span><span class="n">new</span><span class="p">({</span><span class="n">hs</span><span class="p">.</span><span class="n">eventtap</span><span class="p">.</span><span class="n">event</span><span class="p">.</span><span class="n">types</span><span class="p">.</span><span class="n">keyDown</span><span class="p">},</span> <span class="k">function</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">event</span><span class="p">:</span><span class="n">getFlags</span><span class="p">()</span>
    <span class="kd">local</span> <span class="n">keycode</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">keycodes</span><span class="p">.</span><span class="n">map</span><span class="p">[</span><span class="n">event</span><span class="p">:</span><span class="n">getKeyCode</span><span class="p">()]</span>
    <span class="kd">local</span> <span class="n">frontApp</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">frontmostApplication</span><span class="p">()</span>

    <span class="c1">-- 1. First, check if a key was pressed within the target application.</span>
    <span class="k">if</span> <span class="n">frontApp</span> <span class="ow">and</span> <span class="n">frontApp</span><span class="p">:</span><span class="n">bundleID</span><span class="p">()</span> <span class="o">==</span> <span class="n">targetAppBundleID</span> <span class="k">then</span>

        <span class="c1">-- 2. Check if the pressed key is ESC or the Ctrl+C combination.</span>
        <span class="k">if</span> <span class="n">keycode</span> <span class="o">==</span> <span class="s1">'escape'</span> <span class="ow">or</span> <span class="p">(</span><span class="n">keycode</span> <span class="o">==</span> <span class="s1">'c'</span> <span class="ow">and</span> <span class="n">flags</span><span class="p">.</span><span class="n">ctrl</span><span class="p">)</span> <span class="k">then</span>

            <span class="c1">-- Add a 0.05-second delay to resolve timing issues.</span>
            <span class="n">hs</span><span class="p">.</span><span class="n">timer</span><span class="p">.</span><span class="n">doAfter</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">03</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
                <span class="kd">local</span> <span class="n">input_english</span> <span class="o">=</span> <span class="s2">"com.apple.keylayout.ABC"</span>
                <span class="kd">local</span> <span class="n">current_source</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">keycodes</span><span class="p">.</span><span class="n">currentSourceID</span><span class="p">()</span>

                <span class="c1">-- [CASE 1] If the ESC key was pressed (original logic).</span>
                <span class="k">if</span> <span class="n">keycode</span> <span class="o">==</span> <span class="s1">'escape'</span> <span class="k">then</span>
                    <span class="k">if</span> <span class="n">current_source</span> <span class="o">~=</span> <span class="n">input_english</span> <span class="k">then</span>
                        <span class="n">hs</span><span class="p">.</span><span class="n">keycodes</span><span class="p">.</span><span class="n">currentSourceID</span><span class="p">(</span><span class="n">input_english</span><span class="p">)</span>
                        <span class="c1">-- print("ESC pressed: Switched to English.")</span>
                    <span class="k">end</span>
                
                <span class="c1">-- [CASE 2] If the Ctrl+C key combination was pressed (new logic).</span>
                <span class="k">elseif</span> <span class="n">keycode</span> <span class="o">==</span> <span class="s1">'c'</span> <span class="ow">and</span> <span class="n">flags</span><span class="p">.</span><span class="n">ctrl</span> <span class="k">then</span>
                    <span class="c1">-- Perform this special action only if the current input source is not English.</span>
                    <span class="k">if</span> <span class="n">current_source</span> <span class="o">~=</span> <span class="n">input_english</span> <span class="k">then</span>
                        <span class="c1">-- print("Ctrl+C (in non-English): Intercepted.")</span>
                        <span class="c1">-- a. Change the input source to English.</span>
                        <span class="n">hs</span><span class="p">.</span><span class="n">keycodes</span><span class="p">.</span><span class="n">currentSourceID</span><span class="p">(</span><span class="n">input_english</span><span class="p">)</span>
                        <span class="c1">-- b. Simulate an ESC key press.</span>
                        <span class="n">hs</span><span class="p">.</span><span class="n">eventtap</span><span class="p">.</span><span class="n">keyStroke</span><span class="p">({},</span> <span class="s1">'escape'</span><span class="p">)</span>
                        <span class="c1">-- print("--&gt; Switched to English and sent ESC.")</span>
                        <span class="c1">-- c. Block the original Ctrl+C event from being processed. (Crucial)</span>
                        <span class="k">return</span> <span class="kc">true</span>
                    <span class="k">end</span>
                <span class="k">end</span>
            <span class="k">end</span><span class="p">)</span>
        <span class="k">end</span>
    <span class="k">end</span>

    <span class="c1">-- Allow all other key events to pass through.</span>
    <span class="k">return</span> <span class="kc">false</span>
<span class="k">end</span><span class="p">)</span>

<span class="c1">-- Start the listener.</span>
<span class="n">escape_keyevent</span><span class="p">:</span><span class="n">start</span><span class="p">()</span>
</code></pre></div></div>

<ol>
  <li>
    <p>중간에 보면 0.03s의 delay를 주는 부분이 있는데요, 이는 esc 키를 눌렀을때 앱이 포커스를 받는 시간이 필요하기 때문입니다. 이 부분이 없는 상태에서 작성했더니, 어느 시점에서는 아무리 esc 키를 눌러도 영문으로 전환되지 않았습니다. 확인해보니 실제로 esc가 동작하지 않더라구요. 정확한 원인을 파악하지는 못했지만, 아마 esc 키를 눌렀을때 앱이 포커스를 받는 시간이 필요하기 때문이라고 생각했고 해당 부분을 적용한 뒤에는 문제가 없었습니다.</p>
  </li>
  <li>
    <p>vim에서는 ctrl+c가 esc와 동일한 역할을 하는데요, 그래서 대부분 esc를 누르지 않고 ctrl+c를 사용합니다. 문제는 한글로 입력할 경우 ctrl+ㅊ으로 입력이 되어서 esc가 정상적으로 동작하지 않았습니다. 이를 해결하기 위해서 별도의 조건을 추가하였습니다.</p>
  </li>
</ol>

<p>혹시나 저와 같이 이러한 불편을 겪고계신 분들이 있다면 도움이 되었길 바랍니다.</p>]]></content><author><name>Wonjoon</name></author><category term="dev" /><summary type="html"><![CDATA[한국인들이 vim을 사용할때 자주 겪는 어려움 중 하나는 한글로 주석을 작성하다가 mode를 바꾸면 한글이 계속 인식되어 있어서 한영전환을 한번 더 해줘야 한다는 것이다. 이게 생각보다 생산성을 엄청나게 저하시키는데, 많은 곳에서 hammerspoon을 사용해서 이를 해결하고 있어서 이를 공유한다.]]></summary></entry><entry><title type="html">Meetup에 푹 절여진(?) 한주</title><link href="http://localhost:4000/2025/09/21/meetup-addict/" rel="alternate" type="text/html" title="Meetup에 푹 절여진(?) 한주" /><published>2025-09-21T00:00:00+09:00</published><updated>2025-09-21T00:00:00+09:00</updated><id>http://localhost:4000/2025/09/21/meetup-addict</id><content type="html" xml:base="http://localhost:4000/2025/09/21/meetup-addict/"><![CDATA[<p>이 포스트의 전체 내용은 <a href="https://brunch.co.kr/@wallee/26">외부 링크</a>에서 확인하실 수 있습니다.</p>]]></content><author><name>Wonjoon</name></author><category term="dev" /><summary type="html"><![CDATA[예전에는 밋업에 자주 참석했었는데, 회사 일도 그렇고 활동이 뜸하다 최근 배우고 싶은 분야들에 대한 밋업이 우후죽순 생겨나면서 여기저기 참석의사를 표현했다. 본의 아니게 이번주에는 3군데의 밋업 현장에 참여했는데, 그 과정에서의 경험을 공유한다.]]></summary></entry><entry><title type="html">Claude Code를 활용한 vim cheatsheet vscode extension 개발기</title><link href="http://localhost:4000/2025/09/17/vim-vscode-extenstion/" rel="alternate" type="text/html" title="Claude Code를 활용한 vim cheatsheet vscode extension 개발기" /><published>2025-09-17T00:00:00+09:00</published><updated>2025-09-17T00:00:00+09:00</updated><id>http://localhost:4000/2025/09/17/vim-vscode-extenstion</id><content type="html" xml:base="http://localhost:4000/2025/09/17/vim-vscode-extenstion/"><![CDATA[<h2 id="hhkb-배열의-키보드를-구매한-것이-시작이었다">HHKB 배열의 키보드를 구매한 것이 시작이었다</h2>

<p>제 아내를 포함해서 저와 가까운 사람들이 항상 하는 이야기가 있습니다. 제가 물욕이 없다는 것입니다. 저는 개발자치고는 주변기기에 관심도 욕심도 없어서 주는대로 사용하는 편인데요, 여느때처럼 그냥 개발을 하다가 문득 이 상황이 지루하다고 느껴진 때가 있었습니다. 남들처럼 달그락 소리가 나는 멋진 키보드가 한번 써보고 싶었달까요. 그리고 제가 또 평범한건 별로 안좋아합니다.</p>

<p>사실 vim은 대학생 시절부터 써오던, 특히 미국에서 일하던 임베디드 개발자 시기에 굉장히 많이 사용했던 도구입니다. 그렇다고 잘 사용한건 아닙니다. 그냥 어쩔수없이 사용했고, xcode에서 c를 포팅해서 사용할 수 있는 방법을 알고나서부터는 사용하지 않았습니다. 앞서 말씀드린것처럼 저는 평범하지 않은것에 굉장히 흥미를 느끼는데요, ‘찐개발자라면 vim을 사용해야한다’는 영상이 그당시에는 왜 그리 흥미로웠는지 모르겠지만, 그렇게 저는 ‘명색이 개발자라면 vim을 사용하기에 좋은 키보드를 한번쯤 써봐야한다’는 마음으로 HHKB 배열의 키보드를 구매했습니다.</p>

<p>원래 마음같아선 해피해킹을 구입하려고 했습니다만, 여기서도 평범한것을 원치 않았던 저는 키크론에서 HHKB 배열로 만든 <a href="https://keychron.kr/q60max/">Q60 Pro Max</a>를 구입했습니다. 키보드에 대한 사용기는 나중에 블로그로 작성해보려고 합니다.</p>

<p><br /></p>

<p><img src="https://tbnws.hgodo.com/wordpress/keychorn/products/q60max/products_thumb_q60max_2.jpg" alt="" /></p>

<p><br /></p>

<p>결국 평범하지 않은 키배열의 키보드를 구매하고나니, vim을 꼭 제대로 익혀서 남들과 다른 모습의 개발자가 되고싶다는 욕심이 생겼습니다. 그래서 바로 vim extension을 설치했고, 1주일이 채 지나지 않아 해당 기능을 다시 disable하는 사태가 발생하고 말았습니다. 오늘 외운 단축키가 내일 생각이 나지 않았고, 익숙해지기 어려운 구조 덕분에 점점 업무 진행속도가 느려지게 되니 어쩔수 없었습니다.</p>

<p>한참뒤에 다시 또 욕심이 생겨서 vim extension을 설치했지만, 이 과정은 그냥 도르마무마냥 반복되고 있었습니다.</p>

<!-- ![](https://img.extmovie.com/files/attach/images/135/139/200/068/873e05f63a07c1cbd17782f793d970bf.gif) -->
<p><img src="https://velog.velcdn.com/images/wnjoon/post/5bcb4010-a9a1-4641-a9e4-7323deafdd0d/image.gif" alt="" /></p>

<h2 id="단축키를-바로-확인할-수는-없을까">단축키를 바로 확인할 수는 없을까?</h2>

<p>저에게는 vim을 잘 다루고싶다는 동기는 확실했습니다. 문제는 이 동기를 끝까지 이룰 수 있도록 해주는 좋은 방법이 없었습니다. vim 단축키를 화면에 띄워놓기도 해봤고, 프린팅해서 모니터 옆에 놓기도 해봤습니다만 결국 개발 중간에 ‘내가 원하는 단축어를 찾아내는 과정’이 굉장히 불편했습니다.</p>

<p>제가 요즘 AI 에이전트를 이용해서 이것저것 개발해보고싶은 마음에 claude code도 유료로 구독하고, 책도 사는 등 굉장히 열정적입니다. 일명 ‘바이브 코딩(저는 이 단어를 별로 좋아하지는 않습니다만)’이라고 부르는 것을 좀 해보고싶은데, 막상 개발하고싶은 프로그램은 또 없어서 고민중이었는데요. 원래 본인이 가장 필요하다고 느끼는 것을 개발하는 것 부터가 바이브코딩의 시작이라고 하더라구요? 그때 무릎을 탁 치면서 떠올렸습니다.</p>

<p>“아! vim 단축키를 vscode extension으로 만들면 나도 사용할 수 있겠구나!”</p>

<h2 id="다양한-언어로-vim-단축키를-제공하는-extension-만들기">다양한 언어로 vim 단축키를 제공하는 extension 만들기</h2>

<p><a href="https://vim.rtorr.com/">vim.rtorr.com</a>는 다양한 언어로 vim 단축키를 제공하는 사이트입니다. 이 사이트에는 약 37개의 언어로 vim 단축키를 제공하고 있었고, MIT 라이센스 기반으로 되어있었기 때문에 이 사이트를 참조하여 extension에 필요한 데이터를 수집할 수 있었습니다.</p>

<p>처음에는 37개 모든 언어를 제공하는 extension을 만들고자 헀으나, 최종적으로는 가장 많이 사용되는 8개의 언어를 기준으로 extension을 만들었습니다.</p>

<ol>
  <li>English</li>
  <li>한국어</li>
  <li>简体中文</li>
  <li>日本語</li>
  <li>Español</li>
  <li>Deutsch</li>
  <li>Français</li>
  <li>Português</li>
</ol>

<h2 id="claudemd-설정하기">CLAUDE.md 설정하기</h2>

<p>요즘 바이브코딩을 할때 추천하는 순서가 아래와 같다고 합니다.</p>

<ol>
  <li>gemini에게 전체적인 흐름, 아이디어를 검토받고 이를 claude code에게 전달할 수 있는 문서(CLAUDE.md)를 만든다.</li>
  <li>claude code에게 CLAUDE.md를 참고하여 개발하도록 요청한다.</li>
  <li>만들어진 프로그램을 감상한다.</li>
</ol>

<p>그래서 저도 똑같이 gemini에게 먼저 프로그램에 대한 저의 아이디어와 개발 방향을 이야기했습니다.</p>

<p><em>“HHKB(해피해킹배열) 키보드를 거금주고 구매해서 vim을 사용한 개발을 좀 해보려고하는데, 시도는 여러번해도 이게 손에 잘 익혀지지가 않네.. 일반적으로 개발하던 습관이 몸에 베어있어서 그런가. 그래서 vim 단축키를 별도의 창으로 띄워두고 해봤는데, 그러다보니 생산성이 너무 떨어져. 혹시 vscode에서 vim을 사용할때 즉각즉각 단축키를 확인할 수 있는 익스텐션이나 기능들이 있을까? 만약 없으면, 이런 기능을 만들어서 extension으로 만드는건 어려운일일까?”</em></p>

<p>gemini는 저의 애틋한 마음을 알아주었고, claude code가 잘 이해하고 개발해줄 수 있도록 멋드러진 CLAUDE.md를 작성해주었습니다. 물론 채팅을 하면서 생기는 문제점이나 고민들을 해결해가면서 아래와 같이 최종본을 다듬어갔습니다.</p>

<ul>
  <li>사용한 CLAUDE.md 파일은 <a href="https://github.com/wnjoon/vscode-vm-cheet-sheet/blob/main/CLAUDE.md">여기</a>에서 확인할 수 있습니다.</li>
</ul>

<h2 id="claude-code에게-claudemd를-참고하여-개발하도록-요청하기">claude code에게 CLAUDE.md를 참고하여 개발하도록 요청하기</h2>

<p>이제 CLAUDE.md 파일을 개발할 디렉토리에 넣고 claude를 호출했습니다. 바로 CLAUDE.md를 사용해서 개발하기 전에, 전체적인 목차를 보고 혹시 미비하거나 먼저 해결해야 할 사항이 있는지 물어보았습니다. 명확하지 않은 부분들을 claude와 해결하고 난 뒤에 하나씩 작업을 진행했습니다.</p>

<p>진행된 전체적인 단계를 간략하게 요약해보면,</p>

<ol>
  <li>
    <p>vim.rtorr.com로부터 각 언어별로 vim 단축키를 스크래핑할 수 있는 기능을 먼저 만들었습니다. 그리고 초기에 설정했던 한국어와 영어에 대해 먼저 데이터를 수집했습니다.</p>
  </li>
  <li>
    <p>처음에는 한국어와 영어만 지원하려고 했으나, 이왕 하는거 몇개 더 추가해보자는 생각으로 어떤 언어를 추가하면 좋을지 claude와 논의했습니다. 37개 모두를 추가하면 배포 가능한 extension 크기보다 데이터가 커질 수 있기 때문에, 8개정도로 한정하자는 claude의 의견을 받아들였습니다. 최대한 효율적으로(?) 일을 줄여나가는 claude의 모습에 감탄했습니다. 스크래핑 함수를 먼저 만들어놓았기 때문에 나머지 언어들은 금방 수집할 수 있었습니다.</p>
  </li>
  <li>
    <p>누군가는 이미 기본 단축키(Cmd+K+V)를 사용하고 있을 수도 있다고 생각했습니다. 그래서 단축키를 변경하는 기능을 extension에서 제공하도록 해서 설정 메뉴에 들어가는 수고로움을 줄이자고 했습니다. 이부분은 claude도 매우 찬성해주었습니다.</p>
  </li>
</ol>

<h2 id="extension-배포하기">Extension 배포하기</h2>

<p>이부분은 저도 처음하는거라 claude가 알려주는 방법 + 구글링(<a href="https://velog.io/@bo-like-chicken/%EC%9E%91%EA%B3%A0-%EC%86%8C%EC%A4%91%ED%95%9C-Viusal-Studio-Code-%ED%99%95%EC%9E%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EB%A7%8C%EB%93%A4%EA%B8%B0">참조사이트</a>)을 통해 진행했습니다.</p>

<ol>
  <li>Azure DevOps에서 계정을 만들어야 합니다.</li>
  <li><a href="https://marketplace.visualstudio.com/">Marketplace</a>의 Publisher로 등록해야 합니다.</li>
  <li>Personal Access Token을 발급받아야 합니다.</li>
  <li>extension을 배포하려는 터미널(로컬)에서 <code class="language-plaintext highlighter-rouge">vsce login</code> 명령어를 사용하여 publisher ID와 Personal Access Token을 입력합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">vsce package</code> 명령어를 사용하여 extension을 패키징합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">vsce publish</code> 명령어를 사용하여 extension을 배포합니다.</li>
</ol>

<p>추가로 개발된 extension의 package.json의 내용과 publisher 정보(ID), extension의 정보등이 일치해야 합니다. 이 부분은 구글링 또는 AI에게 질문하면 너무 잘 알려주기 때문에 이 글에서는 생략하도록 하겠습니다.</p>

<p>그리고 vsce publish 명령어를 사용하면, Marketplace에 동일한 이름을 가진 extension이 있는지 확인합니다. 중복된 이름이 있는 경우에는 ERROR가 발생하기 때문에, 이를 방지하려면 미리 생각하고 있는 extension의 이름이 중복되지는 않았는지 확인해야 합니다.</p>

<h2 id="굉장히-만족스러운-결과">굉장히 만족스러운 결과</h2>

<p>이렇게 해서 총 걸린 작업은 약 1시간 이내였습니다. 중간에 초콜릿도 먹고 커피도 먹었던 시간을 제외하면 30분 내외로도 충분히 가능할 것 같았습니다.</p>

<p><img src="https://velog.velcdn.com/images/wnjoon/post/dbcce4ac-dc2d-4a82-9fcb-78d2b5d5290f/image.png" alt="image" /></p>

<ul>
  <li>배포된 extension은 <a href="https://marketplace.visualstudio.com/items?itemName=xonxoon.quick-vim-cheatsheet">여기</a>에서 확인할 수 있습니다.</li>
  <li>Marketplace에서 조회가 되지 않으시다면, <a href="https://github.com/wnjoon/vscode-vm-cheet-sheet/releases/tag/v1.0.0">v1.0.0-release</a>를 통해 설치하실 수 있습니다.</li>
  <li><a href="https://github.com/wnjoon/vscode-vm-cheet-sheet">github</a> 리포지토리를 통해서는 작성된 코드를 확인하실 수 있습니다.</li>
</ul>

<h2 id="후기">후기</h2>

<p>이전 글에서도 제가 바이브코딩에 대한 생각을 짧게나마 적어보았지만, AI가 점점 발전해가면서 저와 같은 개발자들은 오히려 ‘엄청나게 똑똑한 조수’를 둔 것 같은 느낌이 듭니다. 조수라고 표현한 이유는, 앞에서 언급하지는 않았지만, AI가 개발하는 중간 결과들에 대해서 이를 주문한 사용자는 꼭 검토를 해야하기 때문입니다.</p>

<p>놀라운 것은 불과 몇달전, 아니 몇주전보다도 점점 AI가 만들어내는 오류가 줄어들고 있다는 것입니다. 이번에 만들어본 extension과 같이 정말 간단한 프로그램의 경우에는 오류를 전혀 발생시키지 않았습니다. 오히려 개발 중간에 제가 수정사항을 요구하거나 좀더 나은 개선 방향을 제시하면 다른 부분과 충돌하지 않으면서 굉장히 빠르게 이를 반영해주는 모습이 보였습니다.</p>

<p>저는 평소에는 windsurf에서 제공하는 탭발사대와 중간중간 개발하면서 이해가 안가거나 귀찮은 작업들을 AI에게 질문하곤 했습니다. 하지만 이번에 claude code를 사용해서 처음부터 끝까지 개발해보니 생각보다 간단한 작업들에 대해서 AI의 도움을 받으니 편리하다는 생각이 들었습니다. 예전에는 새로운 언어나 플랫폼을 학습하고 이를 익숙하게 사용하기까지 시간이 필요했다면, 이제는 전체적인 흐름과 코드를 읽을 줄 아는 기술만 있다면 새로운 언어나 플랫폼을 사용하더라도 크게 제약이 없는 시대가 오는 것 같았습니다.</p>

<p>물론 이번에도 느꼈지만, 개발자를 완전히 대체하는 것은 어려워보입니다. 우선 개발 단계마다 요청자가 잘 이해하고 좋은 방향으로 요청하기 위해서는 기본적인 지식, 아니 그 이상의 전문적인 역량이 필요할 것이라는 생각이 들었습니다. 오히려 AI가 코딩이라는 분야를 선택적인 누군가만 할 수 있는 기술이라기 보다, 인간이 사용할 수 있는 하나의 언어로써 좀더 친숙하게 다가오게 만드는 계기가 되었으면 좋겠다는 생각도 들었습니다.</p>]]></content><author><name>Wonjoon</name></author><category term="dev" /><summary type="html"><![CDATA[HHKB 배열의 키보드는 구매했는데, 모르는 단축어가 나올때마다 웹사이트를 찾는것이 너무 귀찮아서 vim을 설치했다 지웠다만 수없이 반복했습니다. 차라리 vscode에서 단축어를 바로바로 알려줄수만 있으면 좋겠다고 생각해서, claude code를 사용해서 vscode extension을 만들어본 경험을 공유합니다.]]></summary></entry><entry><title type="html">바이브 코딩이란 단어는 적절하지 않다</title><link href="http://localhost:4000/2025/09/16/vibe-coding/" rel="alternate" type="text/html" title="바이브 코딩이란 단어는 적절하지 않다" /><published>2025-09-16T00:00:00+09:00</published><updated>2025-09-16T00:00:00+09:00</updated><id>http://localhost:4000/2025/09/16/vibe-coding</id><content type="html" xml:base="http://localhost:4000/2025/09/16/vibe-coding/"><![CDATA[<p>이 포스트의 전체 내용은 <a href="https://brunch.co.kr/@wallee/25">외부 링크</a>에서 확인하실 수 있습니다.</p>]]></content><author><name>Wonjoon</name></author><category term="essay" /><summary type="html"><![CDATA[바이브 코딩이란 개발자가 생성형 인공지능의 도움을 받아 코드를 작성하는 행위를 일컫는 신조어로 프로그래밍을 할 때 사전에 엄밀한 논리나 설계를 바탕으로 하지 않고 직감과 느낌에 의존한다는 의미로 바이브 코딩이라는 이름이 붙었다. 바이브 코딩이라는 단어는 잘못되었다는 나의 생각을 공유하고싶다.]]></summary></entry><entry><title type="html">백엔드 개발자의 AI로 아주 작은 dApp 만들기</title><link href="http://localhost:4000/2025/09/15/miniamm-dapp-with-ai/" rel="alternate" type="text/html" title="백엔드 개발자의 AI로 아주 작은 dApp 만들기" /><published>2025-09-15T00:00:00+09:00</published><updated>2025-09-15T00:00:00+09:00</updated><id>http://localhost:4000/2025/09/15/miniamm-dapp-with-ai</id><content type="html" xml:base="http://localhost:4000/2025/09/15/miniamm-dapp-with-ai/"><![CDATA[<h2 id="hell-month">Hell-Month</h2>

<p>Hell-Month는 Web3 커뮤니티 빌더이자 개발자인 <a href="https://www.linkedin.com/posts/7oelm_%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%A1%B0%EC%97%98%EA%B3%BC-web3-%EC%82%BD%EC%A7%88-activity-7360115833097908225-HMuM?utm_source=share&amp;utm_medium=member_desktop&amp;rcm=ACoAACX_74kB5FHdEvU5kLzcald4RDFZSjBrrKA">Joel Mun님이 4주 동안 진행한 강의</a> 입니다. Uniswap과 AMM(Autonomous Market Maker)에 대해 배우고 직접 개발까지 해볼 수 있는 소중한 기회였죠.</p>

<p>Uniswap이 무엇인지, AMM은 어떻게 동작하고 왜 필요한지 등 바쁜 와중에도 열정적으로 강의해주시고 직접 과제까지 만들어주셔서 정말 많은 것을 배울 수 있었습니다. 이 글을 쓰는 시점에도 아직 강의와 과제가 남아있지만, 가장 최근에 진행한 dApp 만들기 과제를 통해 느낀 점을 먼저 정리하고 싶었습니다.</p>

<p>결과물은 <a href="https://github.com/wnjoon/cohort-1-assignments-public/tree/assignment-4/4">github</a>에 올려두었습니다.</p>

<h2 id="넘지-못했던-벽-프론트엔드">넘지 못했던 벽, 프론트엔드</h2>

<p>비개발자들은 ‘어차피 다 같은 개발 아니야?’라고 생각할지 모르지만, 프론트엔드와 백엔드는 정말 다른 세계입니다. 뛰어난 풀스택(Full Stack) 개발자가 되려면 두 배, 아니 그 이상의 노력이 필요하죠. 대부분의 직장인 개발자는 둘 중 하나의 영역에 속해있지만, 개인 서비스를 만들고 싶다면 두 분야를 모두 알아야만 합니다.</p>

<p>저 역시 서비스 개발자가 되고 싶다는 생각에 여러 번 프론트엔드에 도전했습니다. 하지만 당장 업무에 쓰는 백엔드 기술 하나만 제대로 파고들기에도 벅찬 현실 속에서, 사용하지도 않는 프론트엔드를 개념부터 공부하기란 쉽지 않았습니다.</p>

<p>과거 갑작스러운 프로젝트 투입으로 프론트엔드를 경험했던 후배가 혼자서 서비스를 뚝딱 만들어내는 모습을 보며 부러워했던 기억이 납니다. 당시에는 원치 않는 업무를 맡아 힘들어하는 후배가 안쓰럽기만 했는데, 돌이켜보면 역시 개발자는 직접 부딪쳐야 성장한다는 것을 그 친구를 통해 깨달을 수 있었습니다.</p>

<h2 id="ai로-프론트엔드를-띄워보다">AI로 프론트엔드를 띄워보다</h2>

<p>개인적으로 프론트엔드 개발이 AI의 도움을 받기 좋은 이유는 다음과 같다고 생각합니다.</p>

<ul>
  <li>정형화된 패턴: 사람들이 선호하는 웹사이트의 화면 구성과 기능은 대부분 비슷합니다.</li>
  <li>풍부한 학습 데이터: AI는 수많은 웹사이트를 학습해 가장 보편적이고 효율적인 방법을 제안할 수 있습니다.</li>
  <li>발전하는 개발 도구: 배포와 관리를 쉽게 해주는 도구들이 계속해서 등장하고 있습니다.</li>
</ul>

<p>결론적으로 AI를 이용하면 ‘남들이 만드는 것과 비슷한 웹사이트’는 충분히 만들 수 있다는 것이죠. 마침 이번 Hell-Month의 과제가 <strong>‘AI를 활용해 AMM 기반 dApp 개발하기’</strong>였기에, 제대로 AI를 이용해보기로 마음먹었습니다.</p>

<p>참고로 제가 사용하고 있는 AI 도구들을 나열해보면,</p>

<ul>
  <li>windsurf: AI 기반 IDE 도구로, 많은 사람들이 cursor를 사용할때 가격이 저렴하다는 이유로 windsurf의 초기버전부터 사용했습니다. 덕분에 아직도 $10의 요금제를 사용하고 있습니다(얼리버드 사용자 특전).</li>
  <li>gemini: 무료 크레딧을 얻게 되어 사용중입니다. 개인적으로 코딩에는 gpt보다 gemini가 더 정확하게 알려주는 것 같습니다. 대신 회화와 같이 실제 사람과의 interaction을 원한다면 gpt가 더 좋을 것 같습니다.</li>
</ul>

<p>추가로 windsurf에서 코딩에 사용한 모델은 claude-sonnet-4입니다. 최근에 claude code를 결제해서 유료버전을 사용해볼까 굉장히 고민하고 있습니다. 아무래도 가격이 비싸고, 저는 실제로 코드를 하나씩 확인하면서 리팩토링하는 것을 주로 업무로 하다보니, 웹서비스를 하나부터 열까지 AI에게 맡길만한 일의 필요성을 느끼지 못하고 있었습니다. 하지만 이번에 진행한 과제에서는 ‘프론트엔드에 대해 전혀 모르는 백엔드 개발자가 미리 만들어놓은 솔리디티 컨트랙트만 가지고 컨텍스트 프로그래밍을 하는 것’이었기 때문에, claude-sonnet-4의 성능을 시험해보고 싶어서 사용했습니다. 물론 현재 시점으로 windsurf에서 claude-sonnet-4는 다른 모델들보다 토큰비용이 2배정도 들어갑니다.</p>

<blockquote>
  <p>opus-4는 훨씬 많은 토큰비용 + 엔트로픽에서 API 키를 별도로 받은 후 비용을 충전해서 사용해야 했기 때문에, 이번 과제를 통해 일명 ‘바이브 코딩’을 테스트해보는 용도로는 적합하지 않다고 판단했습니다. 하지만 이에 대한 생각도 이후에 기술하겠습니다.</p>
</blockquote>

<h2 id="rule-만들기">rule 만들기</h2>

<p>수많은 영상에서 ‘AI 에이전트를 사용하기 전에 먼저 좋은 rule과 컨텍스트를 에이전트에게 주입’할 것을 추천합니다. 최근에 읽었던 책인 <a href="https://product.kyobobook.co.kr/detail/S000215838626">듀얼 브레인</a>에서도, AI에게 더 많이 설명할수록 그 내용을 기반으로 더 풍부한 답변을 줄 수 있다고 언급합니다. 사실 이건 너무 당연한 이야기입니다. AI가 우리의 생각을 읽고 답변할 수 없기 때문에, 우리는 원하는 답변을 얻기 위한 최대한의 정보를 AI에게 제공할 수 있어야 합니다. 그리고 우리가 원하는 방향으로 일이 진행되기 위한 가이드도 제공해야 합니다. 앞에서도 말했지만, AI는 우리의 생각을 읽을 수 없기 때문입니다. 물론 우리같은 사람도 다른 사람의 생각을 읽을 수 없죠.</p>

<p>사실 저는 지금까지 AI를 사용하면서 한번도 rule을 만들어본적은 없습니다. 문제가 있을법한 코드의 위치를 알려주고, 어느 부분에 문제가 있을것 같은지 제 생각을 정리하면서 대화형으로 문제를 해결해갔습니다. 하지만 이번 과제처럼 완전히 무에서 유를 창조하는 일을 AI에게 맡겨보는 것은 처음이었기 때문에, 제대로 rule을 만들어보자고 생각했습니다.</p>

<p>좋은 rule을 만드는 구조는 크게 아래와 같다고 합니다.</p>

<ul>
  <li>서비스 개발의 목적, 원하는 결과물에 대해서 최대한 구체적으로 설명할 수 있어야 한다.</li>
  <li>사용하고자 하는 기술 스택에 대해서 명확하게 정의해야 한다.</li>
  <li>단계별로 업무를 진행할 수 있도록 가이드 해야 한다. AI 또한 이를 명확히 해주지 않으면 여러개의 업무를 마구잡이로 실행할 가능성이 존재하기 때문이다. 그래서 체크박스 등을 통해 하나씩 업무를 해결하고 단계적으로 이를 확인받도록 해야 한다.</li>
  <li>AI가 자동으로 코드를 수정하거나 다음 단계로 넘어갈 수도 있다. 이를 원치 않으면 명확하게 지시할 수 있어야 한다.</li>
</ul>

<p>이 외에도 여러가지가 있었지만, 우선 위의 4가지를 기준으로 아래와 같은 rule을 만들어보았습니다.</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># MiniAMM DApp 개발 체크리스트</span>

<span class="gu">## 1단계: 프로젝트 초기 설정</span>
<span class="p">-</span> [x] Next.js + Typescript 프로젝트 생성
<span class="p">-</span> [x] Ethers.js, RainbowKit, Wagmi 등 필수 라이브러리 설치
<span class="p">-</span> [x] TypeChain 설치 및 ABI로부터 타입스크립트 연동을 위한 설정
<span class="p">-</span> [x] 각 컨트랙트 주소를 관리하기 위한 <span class="sb">`static`</span> 변수 또는 환경변수 파일 설정

<span class="gu">## 2단계: 지갑 연결 및 기본 UI 구성</span>
<span class="p">-</span> [x] RainbowKit을 사용한 지갑 연결 버튼 및 기능 구현
<span class="p">-</span> [x] 지갑이 연결되지 않았을 때의 초기 화면 구성
<span class="p">    -</span> [x] MiniAMM의 전체 유동성(TokenA, TokenB 수량) 표시
<span class="p">-</span> [x] 지갑 연결 후 사용자 정보 표시 UI 추가
<span class="p">    -</span> [x] 사용자의 TokenA, TokenB 보유량 표시
<span class="p">    -</span> [x] 사용자의 LP 토큰 보유량 표시
<span class="p">-</span> [x] 트랜잭션 오류 메시지를 보여줄 UI 공간 확보

<span class="gu">## 3단계: Mock 토큰 발행 기능 구현</span>
<span class="p">-</span> [x] TokenA, TokenB를 각각 발행할 수 있는 UI (입력창, 발행 버튼) 구현
<span class="p">-</span> [x] '발행' 버튼 클릭 시 MockERC20 컨트랙트의 <span class="sb">`freeMintToSender`</span> 함수 호출 로직 구현
<span class="p">-</span> [x] 토큰 발행 후 사용자의 토큰 보유량 실시간 업데이트
<span class="p">-</span> [x] 발행 과정에서 발생하는 오류 처리 및 메시지 표시

<span class="gu">## 4단계: 유동성 공급 기능 구현</span>
<span class="p">-</span> [x] 공급할 TokenA, TokenB의 수량을 입력할 수 있는 UI 구현
<span class="p">-</span> [x] '유동성 공급' 버튼 클릭 시 MiniAMM 컨트랙트의 <span class="sb">`addLiquidity`</span> 함수 호출 로직 구현
<span class="p">-</span> [x] 유동성 공급 후 사용자의 LP 토큰 보유량 및 전체 유동성 ㅁ실시간 업데이트
<span class="p">-</span> [x] 유동성 공급 과정에서 발생하는 오류(예: 보유량 부족) 처리 및 메시지 표시
<span class="p">-</span> [x] 자동 approve 기능: 버튼 클릭 시 필요한 토큰 승인을 자동으로 처리
<span class="p">-</span> [x] 잔액 검증: 트랜잭션 실행 전 사용자 토큰 보유량 확인 및 부족 시 오류 표시
<span class="p">-</span> [x] 단계별 진행 상황 표시: approve → add liquidity 과정을 사용자에게 명확히 안내

<span class="gu">## 5단계: 스왑 기능 구현</span>
<span class="p">-</span> [x] 스왑할 토큰 종류(A→B, B→A) 선택 및 수량 입력 UI 구현
<span class="p">-</span> [x] 입력된 수량에 따라 예상되는 스왑 결과 수량을 실시간으로 계산하여 표시
<span class="p">-</span> [x] '스왑' 버튼 클릭 시 MiniAMM 컨트랙트의 <span class="sb">`swap`</span> 함수 호출 로직 구현
<span class="p">-</span> [x] 트랜잭션 처리 중 '스왑' 버튼 비활성화 처리
<span class="p">-</span> [x] 스왑 완료 후 사용자의 토큰 보유량 및 전체 유동성 실시간 업데이트
<span class="p">-</span> [x] 스왑 과정에서 발생하는 오류 처리 및 메시지 표시

<span class="gu">## 6단계: 유동성 해제 기능 구현</span>
<span class="p">-</span> [x] 해제할 LP 토큰의 수량을 입력할 수 있는 UI 구현
<span class="p">-</span> [x] '유동성 해제' 버튼 클릭 시 MiniAMM 컨트랙트의 <span class="sb">`removeLiquidity`</span> 함수 호출 로직 구현
<span class="p">-</span> [x] 트랜잭션 처리 중 '해제' 버튼 비활성화 처리
<span class="p">-</span> [x] 유동성 해제 완료 후 사용자의 토큰/LP 보유량 및 전체 유동성 실시간 업데이트
<span class="p">-</span> [x] 유동성 해제 과정에서 발생하는 오류 처리 및 메시지 표시

<span class="gu">## 7단계: 배포</span>
<span class="p">-</span> [x] Cloudflare Pages를 통한 웹 애플리케이션 배포 준비
<span class="p">-</span> [x] Next.js 정적 빌드 설정 (output: 'export')
<span class="p">-</span> [x] TypeScript 오류 수정 (any → unknown 타입 변경)
<span class="p">-</span> [x] Wrangler CLI 설치 및 Cloudflare 인증
<span class="p">-</span> [x] Cloudflare Pages 프로젝트 생성 (miniamm-dapp)
<span class="p">-</span> [x] 최종 테스트 및 배포 완료

<span class="gs">**배포 결과:**</span>
<span class="p">-</span> 메인 도메인: https://miniamm-dapp.pages.dev ✅ (정상 동작)
<span class="p">-</span> 배포 URL: https://27e7e9a0.miniamm-dapp.pages.dev ⚠️ (SSL 오류 - 정상적인 현상)
<span class="p">-</span> 업로드된 파일: 200개
<span class="p">-</span> 배포 상태: 성공
</code></pre></div></div>

<p>위의 내용은 제가 최종적으로 개발을 마무리한 결과입니다. 총 7단계로 개발범위를 나누어보았고, 각 단계별로 소항목을 체크박스 형식으로 구성해서 하나씩 해결할때마다 체크박스에 표시하도록 했습니다.</p>

<p>체크박스 형식을 사용하게 된 가장 큰 이유중 하나는, AI의 기억력에 한계가 있기 때문이었습니다. 자신이 이제까지 진행한 내용을 글로 남겨놓았기 때문에, 항상 이 파일을 기준으로 진행시켜서 이미 완료된 업무를 중복해서 진행함으로 토큰을 낭비하지 않게 했습니다. 추가로 각 단계별로 완료될때마다 저에게 최종적인 확인을 받도록 했는데요, 이렇게 했음에도 불구하고 중간에 자기 마음대로 다음 단계로 넘어가서 기능을 구현하는 경우도 있었습니다. 이부분을 막기 위한 더 좋은 컨텍스트 작성 방법이 있는지 확인해야겠다고 생각했습니다.</p>

<p>또한 각 단계가 마무리될때마다 꼭 커밋을 해야겠더라구요. 간혹 AI가 이미 잘 작성되어서 확인이 끝난 기능임에도 불구하고, 다음 단계의 기능을 개발하면서 이전에 개발완료된 기능을 자기 마음대로 고치는 경우도 있었습니다. 코드의 갯수가 많아질수록 사용자가 예측하지 못한 변경이 발생해서 프로그램이 잘못되는 경우, 어디서 문제가 발생했는지 추적하는게 어려웠습니다. 가장 좋은 방식은 개발 단계마다 최대한 많은 횟수로 커밋을 하면 좋겠지만, 이러면 너무 많은 히스토리가 남아서 오히려 추적을 방해할 수도 있다 생각했습니다. 그래서 각 단계별로 완료될때마다 커밋을 직접 했습니다. 나중에 컨텍스트 작성 능력이 더 발전하면, AI가 직접 커밋을 하도록 하는것도 좋을것 같았습니다.</p>

<h2 id="사용-후기">사용 후기</h2>

<p>실제로 사용해본 결과 위의 단계 중 6단계까지는 거의 실수없이 개발을 완료했습니다. 단계별로 테스트하면서 제가 예상했던 것과 다른 결과가 나오는 경우, 에러 메시지와 함께 원하는 결과를 잘 설명해주면 거의 1-2번만에 에러를 해결해주는 모습도 보여줬습니다.</p>

<p>하지만 배포처럼 외부 서비스를 이용하는 작업에는 약간의 가이드가 필요했습니다. 저는 Cloudflare Pages를 이용해 배포하려 했는데, 제 경험 부족도 있었지만 AI가 계속해서 ERR_SSL_VERSION_OR_CIPHER_MISMATCH 오류를 뿜어내며 해결하지 못해 한참 애를 먹었습니다. 나중에 알고 보니, 이 SSL 오류는 Cloudflare Pages 배포 시 일시적으로 발생할 수 있는 일반적인 현상이었습니다. 메인 도메인이 정상 작동하면 배포는 성공한 것이었죠.</p>

<p>재미있는 것은, 위의 내용을 알려준것도 AI였다는 것입니다. 계속 오류가 해결되지 않아서 코드를 이전 단계를 완료한 버전으로 되돌리고, 새로운 AI 창을 열어서 다시 대화를 시도했습니다. 이전 단계까지 완료되었다는 체크박스를 확인해서 다시 배포를 시도해보도록 했습니다. AI가 자신이 진행했던 히스토리를 복기할 수 있도록 문서를 유지하는 것의 중요성을 다시 알 수 있었고, AI도 항상 동일한 결과를 만들어내지 못하기 때문에, 얼만큼 더 많은 정보를 제공하느냐가 확실히 중요한 부분이라는 것을 알았습니다.</p>

<p>추가로 이번 과제를 통해 ‘일반 사용자들이 생각하고 구현하고자 하는 서비스는 거의 AI를 이용해서 만들어낼 수 있겠다’는 생각이 들었습니다. 복잡한 시스템인 경우에는 좀더 시도해봐야겠지만, 왠만한 기능 구현은 AI를 이용해서 할 수 있었습니다. 다만, 많은 사람들이 이야기하는 ‘바이브코딩에 대한 현실의 자각’은 필요한 것으로 보였습니다. IT에 대해 지식이 전혀 없거나, 혹은 지식이 부족한 사람들의 경우에는 아무리 AI가 서비스를 만들어준다 하더라도 이걸 확인하는 것이 어려울 것 같았습니다. 결국 ‘제대로 일하고 있는지 검토하는 능력’이 확실히 필요해보였습니다. 하나의 기술에 대한 깊은 이해도를 가진 사람이 되는것이 예전에는 중요했다면, 지금은 내가 개발하고자 하는 서비스에 필요한 기능을 빠르게 선택하고 새로운 기능을 빠르게 이해해서 AI에게 다양한 선택지와 정보를 풍부하게 제공할 수 있는 사람이 되는것이 중요한 시대가 되어가고 있다 생각했습니다.</p>]]></content><author><name>Wonjoon</name></author><category term="dev" /><summary type="html"><![CDATA[프론트엔드에 대해 전혀 모르는 백엔드 개발자가 AI만 사용해서 매우 작은 AMM 기반 dApp을 개발해보는 과정을 정리했습니다. 이 모든 과정은 Hell-Month라고 하는 단기 프로젝트에서 진행하였습니다.]]></summary></entry><entry><title type="html">개발자라면 이 책을 꼭 읽어보세요</title><link href="http://localhost:4000/2025/09/15/tobe-good-developer/" rel="alternate" type="text/html" title="개발자라면 이 책을 꼭 읽어보세요" /><published>2025-09-15T00:00:00+09:00</published><updated>2025-09-15T00:00:00+09:00</updated><id>http://localhost:4000/2025/09/15/%08tobe-good-developer</id><content type="html" xml:base="http://localhost:4000/2025/09/15/tobe-good-developer/"><![CDATA[<p>이 포스트의 전체 내용은 <a href="https://brunch.co.kr/@wallee/24">외부 링크</a>에서 확인하실 수 있습니다.</p>]]></content><author><name>Wonjoon</name></author><category term="essay" /><summary type="html"><![CDATA[대부분의 개발 서적이 기술에 대해 이야기할 때, 이 책은 좋은 개발자가 되기 위한 태도, 습관, 그리고 일하는 방식에 대해 이야기합니다. 이 책의 핵심 내용을 요약하고 공유합니다.]]></summary></entry><entry><title type="html">스테이블코인에 대한 개인적인 생각</title><link href="http://localhost:4000/2025/09/12/thoughts-stable-coin/" rel="alternate" type="text/html" title="스테이블코인에 대한 개인적인 생각" /><published>2025-09-12T00:00:00+09:00</published><updated>2025-09-12T00:00:00+09:00</updated><id>http://localhost:4000/2025/09/12/thoughts-stable-coin</id><content type="html" xml:base="http://localhost:4000/2025/09/12/thoughts-stable-coin/"><![CDATA[<p>이 포스트의 전체 내용은 <a href="https://brunch.co.kr/@wallee/23">외부 링크</a>에서 확인하실 수 있습니다.</p>]]></content><author><name>Wonjoon</name></author><category term="crypto" /><summary type="html"><![CDATA[CBDC, 토큰증권을 개발한 블록체인 개발자로서 스테이블코인을 바라보는 개인적인 생각을 정리했습니다.]]></summary></entry><entry><title type="html">컨텍스트 엔지니어링: AI를 효과적으로 사용하는 방법</title><link href="http://localhost:4000/2025/08/14/context-engineering/" rel="alternate" type="text/html" title="컨텍스트 엔지니어링: AI를 효과적으로 사용하는 방법" /><published>2025-08-14T00:00:00+09:00</published><updated>2025-08-14T00:00:00+09:00</updated><id>http://localhost:4000/2025/08/14/context-engineering</id><content type="html" xml:base="http://localhost:4000/2025/08/14/context-engineering/"><![CDATA[<p>이 포스트의 전체 내용은 <a href="https://brunch.co.kr/@wallee/22">외부 링크</a>에서 확인하실 수 있습니다.</p>]]></content><author><name>Wonjoon</name></author><category term="dev" /><summary type="html"><![CDATA[AI의 이해 능력과 생성 능력 사이의 비대칭성을 설명하고, '프롬프트 엔지니어링'을 넘어 AI의 잠재력을 최대한 활용하기 위한 '컨텍스트 엔지니어링'의 개념, 핵심 단계(검색, 처리, 관리), 그리고 이를 바탕으로 한 최적의 AI 활용 방법을 제시합니다.]]></summary></entry></feed>