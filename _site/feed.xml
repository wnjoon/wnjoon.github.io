<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-21T15:04:56+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">//TODO: Write Blog</title><subtitle>A (nearly) no-CSS, fast, minimalist Jekyll theme.
</subtitle><author><name>Wonjoon</name></author><entry><title type="html">Should You Really Get a MacBook?</title><link href="http://localhost:4000/2025/03/19/macbook-purchase-guidline/" rel="alternate" type="text/html" title="Should You Really Get a MacBook?" /><published>2025-03-19T00:00:00+09:00</published><updated>2025-03-19T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/19/macbook-purchase-guidline</id><content type="html" xml:base="http://localhost:4000/2025/03/19/macbook-purchase-guidline/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#target-readers">Target Readers</a></li>
  <li><a href="#introduction-so-many-laptops-why-macbook">Introduction: So Many Laptops, Why MacBook?</a></li>
  <li><a href="#macbooks-are-pretty-period">MacBooks Are Pretty. Period</a></li>
  <li><a href="#is-a-macbook-necessary-for-developers">Is a MacBook Necessary for Developers?</a></li>
  <li><a href="#the-ill-use-it-forever-justification">The “I’ll Use It Forever” Justification</a></li>
  <li><a href="#is-macos-hard-to-use">Is macOS Hard to Use?</a></li>
  <li><a href="#the-hidden-costs-accessories--compatibility">The Hidden Costs: Accessories &amp; Compatibility</a></li>
  <li><a href="#but-what-about-apple-ecosystem--aesthetics">But What About Apple Ecosystem &amp; Aesthetics?</a></li>
  <li><a href="#can-you-game-on-a-mac">Can You Game on a Mac?</a></li>
  <li><a href="#final-thoughts">Final Thoughts</a></li>
</ul>

<h2 id="target-readers">Target Readers</h2>

<ul>
  <li>Aspiring developers</li>
  <li>Students looking to buy their first laptop</li>
  <li>Non-tech users who still want a cool MacBook</li>
</ul>

<h2 id="introduction-so-many-laptops-why-macbook">Introduction: So Many Laptops, Why MacBook?</h2>

<p>Back in my college days, ThinkPads (a.k.a. the famous red-dotted “bbalkkong”) were the go-to laptops for CS majors. Brands like Dell and HP were also quite popular. Out of patriotism (and practicality), I chose a lightweight 11-inch LG laptop.</p>

<p>Then came the game-changer: the 13-inch Retina MacBook in 2014. I saw that crisp screen once and was sold.</p>

<p>Since then, for over 10 years, my main work machine has always been a MacBook. But now that MacBooks are more popular than ever — especially among developers — it’s worth asking…</p>

<p><strong>“Do you really need a MacBook to become a developer?”</strong></p>

<h2 id="macbooks-are-pretty-period">MacBooks Are Pretty. Period</h2>

<p>Let’s get real. One of the strongest appeals of a MacBook is its beauty. It’s not just a laptop — it’s a fashion statement, a status symbol, and yes, a design masterpiece.</p>

<p>From “Why would you get that overpriced laptop?” to “You must have a MacBook to code!” — the perception of the MacBook in Korea and beyond has changed drastically.</p>

<p>Yes, Apple’s silicon chips are powerful. Yes, Windows laptops are getting pricier too. But ultimately…</p>

<p><strong>“You buy a MacBook first because it looks amazing.”</strong></p>

<p>And honestly, that’s okay.</p>

<h2 id="is-a-macbook-necessary-for-developers">Is a MacBook Necessary for Developers?</h2>

<p>Many say that since macOS is Unix-based, it’s easier for developers — especially those working with Linux servers. That was definitely true… in the past.</p>

<p>But Windows has caught up. With WSL2 (Windows Subsystem for Linux), you can run full Linux environments natively on Windows — no need for virtual machines or complex setups.</p>

<p>Plus, Apple’s shift to ARM-based chips (M1, M2, M3, etc.) created some compatibility issues with traditional x86 Linux environments. While tools like Docker help mitigate that, it’s not all smooth sailing.</p>

<p><strong>“A MacBook might not always be better — just different.”</strong></p>

<p>So no, being a developer doesn’t require a MacBook. Windows with WSL is now more than capable — and in some cases, even better suited for server-side development.</p>

<h2 id="the-ill-use-it-forever-justification">The “I’ll Use It Forever” Justification</h2>

<p>It’s common to see questions like:</p>

<p><strong>“I’m just learning to code now… should I max out the CPU and RAM?”</strong></p>

<p>My take? No. Unless you’re editing 8K videos or training AI models, a base model MacBook Air is more than enough.</p>

<p>I’ve used the 2020 M1 MacBook Pro for over 4 years with zero issues — and I’m a professional developer.</p>

<p><strong>“Buy for your current needs. Upgrade later if you actually need to.”</strong></p>

<p>And yes, 16-inch models look cool, but they’re heavy. If you commute on foot or public transport, go 14-inch or smaller.</p>

<h2 id="is-macos-hard-to-use">Is macOS Hard to Use?</h2>

<p>For lifelong Windows users: yes, at first. macOS does things differently — keyboard shortcuts, window management, file system, etc.</p>

<p>But you’ll adapt. Humans are adaptable creatures.</p>

<p>If you’re used to Microsoft Office or specific Korean software, there might be hiccups — but these days, most major apps support macOS just fine.</p>

<p>And yes, macOS no longer struggles with Korean fonts or certificates. That ship has sailed.</p>

<p><img src="https://github.com/user-attachments/assets/cd97cb20-e494-43cc-8167-484784e28a2b" alt="Image" />
@ <a href="https://www.apple.com/kr/macbook-pro/mac-does-that/">And Apple says you can easily switch from Windows to macOS :)</a>.</p>

<h2 id="the-hidden-costs-accessories--compatibility">The Hidden Costs: Accessories &amp; Compatibility</h2>

<p>You might need to buy extra accessories.</p>

<ul>
  <li>USB hubs, dongles, adapters — they add up.</li>
  <li>Cheaper accessories can cause damage. Get reputable brands.</li>
</ul>

<p>Windows on Mac? Not easy anymore.</p>

<ul>
  <li>Since Apple moved to their own chips, BootCamp is gone.</li>
  <li>You’ll need virtualization software (like Parallels), and even that costs money -  plus a Windows license.</li>
</ul>

<h2 id="but-what-about-apple-ecosystem--aesthetics">But What About Apple Ecosystem &amp; Aesthetics?</h2>

<p>Some say:</p>

<p><strong>“If you have an iPhone, iPad, AirPods — you should definitely get a MacBook too.”</strong></p>

<p>Not necessarily.</p>

<p>Sure, continuity features like AirDrop or shared clipboard are nice. But you won’t lose much by not having them either.</p>

<p>You don’t need to complete the Apple Infinity Gauntlet.</p>

<p>Also: yes, it looks amazing at Starbucks. My wife uses a Galaxy Book, I still take my MacBook.</p>

<h2 id="can-you-game-on-a-mac">Can You Game on a Mac?</h2>

<p>Short answer: You can. Long answer: It’s not ideal, but it’s getting better.</p>

<p>Cloud gaming, browser-based games, and new compatibility layers (like Wine, Crossover, etc.) help. But if you’re a serious gamer? Stick with Windows.</p>

<p><strong>“But hey, long gaming sessions aren’t healthy anyway.”</strong></p>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>I’ve used MacBooks for over 10 years — and never regretted it. But that doesn’t mean it’s the right choice for everyone.</p>

<p>Here’s what I’ll say:</p>

<p>Get a MacBook if:</p>

<ul>
  <li>You love the design</li>
  <li>You want a reliable, well-optimized device</li>
  <li>You value battery life and quiet operation</li>
  <li>You’re okay adapting to macOS</li>
</ul>

<p>Don’t get one if:</p>

<ul>
  <li>You’re on a tight budget</li>
  <li>You need specific Windows-only software</li>
  <li>You game a lot</li>
</ul>

<p>Buy what fits your budget and purpose. Don’t overthink it. And remember — MacBooks are not mandatory for developers.</p>

<p>Hope this post helps you make a better decision!</p>]]></content><author><name>Wonjoon</name></author><category term="macbook" /><summary type="html"><![CDATA[Just because it’s expensive doesn’t mean it’s the right choice — and a MacBook might not be the answer for everyone. This post explores whether a MacBook truly fits your needs, budget, and lifestyle — especially if you’re a student or aspiring developer.]]></summary></entry><entry><title type="html">Rust Error Handling: unwrap, expect, and unwrap_or</title><link href="http://localhost:4000/2025/03/18/rust-error-handling-methods/" rel="alternate" type="text/html" title="Rust Error Handling: unwrap, expect, and unwrap_or" /><published>2025-03-18T00:00:00+09:00</published><updated>2025-03-18T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/18/rust-error-handling-methods</id><content type="html" xml:base="http://localhost:4000/2025/03/18/rust-error-handling-methods/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#why-rust-forces-you-to-handle-errors">Why Rust Forces You to Handle Errors</a></li>
  <li><a href="#handling-errors-unwrap-expect-unwrap_or">Handling Errors: unwrap, expect, unwrap_or</a></li>
  <li><a href="#more-idiomatic-alternatives">More Idiomatic Alternatives</a></li>
  <li><a href="#comparison-with-go">Comparison with Go</a></li>
  <li><a href="#summary">Summary</a></li>
</ul>

<h2 id="why-rust-forces-you-to-handle-errors">Why Rust Forces You to Handle Errors</h2>

<p>In Rust, functions that can fail typically return a Result&lt;T, E&gt; type. You must handle the result, even if you are confident the operation will succeed.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="s">"42"</span><span class="py">.parse</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">();</span>
<span class="c1">// Result&lt;i32, ParseIntError&gt;</span>
</code></pre></div></div>

<p>Trying to ignore the Result leads to a compile-time warning:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>warning: unused <span class="sb">`</span>Result<span class="sb">`</span> that must be used
 <span class="nt">--</span><span class="o">&gt;</span> main.rs:2:9
  |
2 |     <span class="nb">let </span>num <span class="o">=</span> <span class="s2">"42"</span>.parse::&lt;i32&gt;<span class="o">()</span><span class="p">;</span>
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^
  |         |
  |         this <span class="sb">`</span>Result<span class="sb">`</span> may be an <span class="sb">`</span>Err<span class="sb">`</span> variant, which should be handled
</code></pre></div></div>

<p>You can’t use the result as if it’s already a number:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="s">"42"</span><span class="py">.parse</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">();</span> <span class="c1">// Ok(42)</span>
<span class="k">let</span> <span class="n">doubled</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>         <span class="c1">// Error: result is not i32 but Result&lt;i32, _&gt;</span>
</code></pre></div></div>

<h2 id="handling-errors-unwrap-expect-unwrap_or">Handling Errors: unwrap, expect, unwrap_or</h2>

<p>Rust provides several built-in ways to handle Result values.</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Panics on Error?</th>
      <th>Provides Default Value?</th>
      <th>Custom Message?</th>
      <th>Use Case</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>unwrap()</td>
      <td>Yes</td>
      <td>No</td>
      <td>No</td>
      <td>Quick tests, throwaway code</td>
    </tr>
    <tr>
      <td>expect(“msg”)</td>
      <td>Yes</td>
      <td>No</td>
      <td>Yes</td>
      <td>Debugging with context</td>
    </tr>
    <tr>
      <td>unwrap_or(x)</td>
      <td>No</td>
      <td>Yes</td>
      <td>No</td>
      <td>Fallback/default values</td>
    </tr>
  </tbody>
</table>

<h3 id="unwrap">unwrap()</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="s">"42"</span><span class="py">.parse</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span>    <span class="c1">// Returns 42</span>
<span class="k">let</span> <span class="n">y</span> <span class="o">=</span> <span class="s">"abc"</span><span class="py">.parse</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span>   <span class="c1">// Panics!</span>
</code></pre></div></div>

<p>When an error occurs, <code class="language-plaintext highlighter-rouge">unwrap()</code> panics with a default error message:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>thread <span class="s1">'main'</span> panicked at <span class="s1">'called `Result::unwrap()` on an `Err` value: ParseIntError'</span>
</code></pre></div></div>

<p>Not safe for production code—use only when you’re absolutely sure it will not fail.</p>

<h3 id="expectcustom-message">expect(“custom message”)</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="s">"abc"</span>
    <span class="py">.parse</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">()</span>
    <span class="nf">.expect</span><span class="p">(</span><span class="s">"number type is required"</span><span class="p">);</span>
</code></pre></div></div>

<p>Customizes the panic message:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>thread <span class="s1">'main'</span> panicked at <span class="s1">'number type is required: ParseIntError'</span>
</code></pre></div></div>

<p>Helps during debugging by giving clearer failure context than <code class="language-plaintext highlighter-rouge">unwrap()</code>.</p>

<h3 id="unwrap_ordefault_value">unwrap_or(default_value)</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="s">"abc"</span><span class="py">.parse</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">()</span><span class="nf">.unwrap_or</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// 0 when parse fails</span>
<span class="nd">println!</span><span class="p">(</span><span class="s">"{x}"</span><span class="p">);</span> <span class="c1">// Output: 0</span>
</code></pre></div></div>

<p>No panic. Returns a default fallback instead of crashing.</p>

<h2 id="more-idiomatic-alternatives">More Idiomatic Alternatives</h2>

<p>These methods avoid panic and allow graceful error handling.</p>

<h3 id="pattern-matching-with-match">Pattern Matching with match</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="s">"42"</span><span class="py">.parse</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">();</span>

<span class="k">match</span> <span class="n">result</span> <span class="p">{</span>
    <span class="nf">Ok</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"Parsed number: {}"</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span>
    <span class="nf">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"Error occurred: {}"</span><span class="p">,</span> <span class="n">e</span><span class="p">),</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="if-let-for-simpler-matching">if let for Simpler Matching</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="k">let</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">=</span> <span class="s">"42"</span><span class="py">.parse</span><span class="p">::</span><span class="o">&lt;</span><span class="nb">i32</span><span class="o">&gt;</span><span class="p">()</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Parsed number: {}"</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Not a valid number."</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="propagating-errors-with--operator">Propagating Errors with ? Operator</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">parse_number</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">i32</span><span class="p">,</span> <span class="nn">std</span><span class="p">::</span><span class="nn">num</span><span class="p">::</span><span class="n">ParseIntError</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="s">"42"</span><span class="nf">.parse</span><span class="p">()</span><span class="o">?</span><span class="p">;</span>  <span class="c1">// If parse fails, early return</span>
    <span class="nf">Ok</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Only works inside functions that return <code class="language-plaintext highlighter-rouge">Result</code>.</li>
</ul>

<h2 id="comparison-with-go">Comparison with Go</h2>

<table>
  <thead>
    <tr>
      <th>Rust</th>
      <th>Go</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>.unwrap()</td>
      <td>panic(err)</td>
    </tr>
    <tr>
      <td>.unwrap_or(default_value)</td>
      <td>if err != nil { return default_value }</td>
    </tr>
    <tr>
      <td>.expect(“msg”)</td>
      <td>panic(“msg: “ + err.Error())</td>
    </tr>
  </tbody>
</table>

<h2 id="summary">Summary</h2>

<p>Rust enforces error handling at compile time to eliminate runtime surprises. You have multiple tools at your disposal—choose based on the level of control and safety you need:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unwrap()</code> – Fast, but dangerous.</li>
  <li><code class="language-plaintext highlighter-rouge">expect("msg")</code> – Safer panic with clear context.</li>
  <li><code class="language-plaintext highlighter-rouge">unwrap_or(default_value)</code> – Clean fallbacks.</li>
  <li><code class="language-plaintext highlighter-rouge">match</code>, <code class="language-plaintext highlighter-rouge">if let</code>, <code class="language-plaintext highlighter-rouge">?</code> – Idiomatic and safe.</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="rust" /><summary type="html"><![CDATA[Learn how Rust enforces error handling at compile time and explore different techniques for dealing with Result effectively using unwrap, expect, unwrap_or, and pattern matching.]]></summary></entry><entry><title type="html">Understanding inline Functions in C: When and How They Work</title><link href="http://localhost:4000/2025/03/17/inline-function-c/" rel="alternate" type="text/html" title="Understanding inline Functions in C: When and How They Work" /><published>2025-03-17T00:00:00+09:00</published><updated>2025-03-17T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/17/inline-function-c</id><content type="html" xml:base="http://localhost:4000/2025/03/17/inline-function-c/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#what-is-an-inline-function-in-c">What Is an inline Function in C?</a></li>
  <li><a href="#why-use-inline-functions">Why Use inline Functions?</a></li>
  <li><a href="#when-does-the-compiler-ignore-inline">When Does the Compiler Ignore inline?</a></li>
  <li><a href="#forcing-the-compiler-to-inline-a-function">Forcing the Compiler to Inline a Function</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="what-is-an-inline-function-in-c">What Is an inline Function in C?</h2>

<p>An <code class="language-plaintext highlighter-rouge">inline</code> function is a special function in C that suggests the compiler replace the function call with its actual code to optimize performance.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kr">inline</span> <span class="kt">int</span> <span class="nf">square</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">square</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// Expands to: int result = (5 * 5);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>When the compiler processes <code class="language-plaintext highlighter-rouge">square(5)</code>, it replaces the function call with its definition: <code class="language-plaintext highlighter-rouge">int result = (5 * 5);</code></li>
  <li>This eliminates the overhead of function calls, potentially improving performance.</li>
</ul>

<h2 id="why-use-inline-functions">Why Use inline Functions?</h2>

<ul>
  <li>Performance Optimization – Reduces function call overhead.</li>
  <li>Encapsulation – Keeps function logic organized while avoiding extra calls.</li>
  <li>Reduced Stack Usage – No need to store function call metadata in the stack.</li>
</ul>

<h2 id="when-does-the-compiler-ignore-inline">When Does the Compiler Ignore inline?</h2>

<p>However, unlike Rust macros, inline in C is just a hint to the compiler—it does not guarantee inlining. The compiler decides whether to actually inline the function based on various optimization criteria.</p>

<p>Despite marking a function as inline, the compiler might not inline it in the following cases:</p>

<h3 id="1️-the-function-is-too-large">1️. The Function Is Too Large</h3>

<p>If a function contains too many instructions, inlining it could increase code size unnecessarily.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">inline</span> <span class="kt">int</span> <span class="nf">big_function</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Large loop</span>
        <span class="n">result</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Expanding this function in multiple places increases binary size.</li>
  <li>Too much code duplication can harm performance rather than improve it.</li>
  <li>The compiler might keep it as a regular function instead.</li>
</ul>

<h3 id="2-recursive-functions">2. Recursive Functions</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">inline</span> <span class="kt">int</span> <span class="nf">factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// Recursive call</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Inlining a recursive function is impossible in most cases because the function keeps calling itself.</li>
  <li>The compiler would need to unroll the recursion into a loop, which is not always feasible.</li>
  <li>If recursion depth is small and known in advance, consider manual loop unrolling instead.</li>
</ul>

<h3 id="3-function-pointers-prevent-inlining">3. Function Pointers Prevent Inlining</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">inline</span> <span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">func_ptr</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="n">add</span><span class="p">;</span> <span class="c1">// Assign function to pointer</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">func_ptr</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>     <span class="c1">// Compiler does not know function at compile time</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>When using function pointers, the actual function call is determined at runtime, not at compile time.</li>
  <li>The compiler cannot replace function calls with direct code expansion because the target function is unknown during compilation.</li>
  <li>Use direct function calls instead of function pointers when inlining is critical.</li>
</ul>

<h2 id="forcing-the-compiler-to-inline-a-function">Forcing the Compiler to Inline a Function</h2>

<p>If the compiler ignores inline, you can explicitly force inlining using compiler-specific attributes.</p>

<h3 id="1-gcc--clang-attributealways_inline">1. GCC &amp; Clang: <strong>attribute</strong>((always_inline))</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">inline</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">always_inline</span><span class="p">))</span> <span class="kt">int</span> <span class="n">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Ensures the function will always be inlined, even if it’s large.</li>
  <li>Only works if optimizations are enabled (-O2 or higher).</li>
  <li>Forcing inlining on a large function can increase binary size and reduce cache efficiency.</li>
</ul>

<h3 id="2-msvc-microsoft-compiler-__forceinline">2. MSVC (Microsoft Compiler): __forceinline</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__forceinline</span> <span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Forces the function to be inlined in Microsoft compilers (MSVC).</li>
  <li>Ensures consistent inlining behavior across different builds.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Use inline for:</p>

<ul>
  <li>Small, frequently used functions.</li>
  <li>Performance-sensitive calculations (e.g., mathematical operations).</li>
  <li>Functions that replace macros for better type safety.</li>
</ul>

<p>Avoid inline for:</p>

<ul>
  <li>Large functions (can increase binary size).</li>
  <li>Recursive functions.</li>
  <li>Functions used with pointers or virtual functions (C++).</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="c" /><summary type="html"><![CDATA[inline functions in C allow code to be expanded at compile time and included in the final executable.]]></summary></entry><entry><title type="html">How macros in Rust work and comparison with C language</title><link href="http://localhost:4000/2025/03/17/rust-macro-compare-c/" rel="alternate" type="text/html" title="How macros in Rust work and comparison with C language" /><published>2025-03-17T00:00:00+09:00</published><updated>2025-03-17T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/17/rust-macro-compare-c</id><content type="html" xml:base="http://localhost:4000/2025/03/17/rust-macro-compare-c/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#what-are-macros-in-rust">What Are Macros in Rust?</a></li>
  <li><a href="#macros-vs-functions-in-rust">Macros vs. Functions in Rust</a></li>
  <li><a href="#compile-time-vs-runtime-execution">Compile-Time vs. Runtime Execution</a></li>
  <li><a href="#when-should-you-use-macros">When Should You Use Macros?</a></li>
  <li><a href="#when-should-you-use-functions">When Should You Use Functions?</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="what-are-macros-in-rust">What Are Macros in Rust?</h2>

<p>Macros in Rust allow code to be expanded at compile time and included in the final executable.</p>

<p><strong>Rust documentation commonly refers to macros as “expanded” at compile time.</strong></p>

<ul>
  <li>However, this term can be <strong>misleading</strong>.</li>
  <li>The term “expanded” may suggest that the code dynamically changes at runtime. However, Rust macros operate entirely at compile time and do not modify execution at runtime.</li>
  <li>Instead of just being “expanded,” macros generate code, which is then compiled into the final executable.</li>
</ul>

<p>A more precise way to explain macros:</p>

<ul>
  <li>Macros generate code at compile time and include it in the final program.</li>
  <li>Once the executable is compiled, the macro-generated code is “fixed” and cannot change at runtime.</li>
</ul>

<h2 id="macros-vs-functions-in-rust">Macros vs. Functions in Rust</h2>

<table>
  <thead>
    <tr>
      <th>Feature</th>
      <th>Macros (macro_rules!)</th>
      <th>Functions (fn)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Code Generation at Compile Time</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Variable Number of Arguments</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Supports Multiple Types</td>
      <td>Yes (via code generation)</td>
      <td>Yes (via generics)</td>
    </tr>
    <tr>
      <td>Performance Optimization</td>
      <td>Yes (no loops, direct code expansion)</td>
      <td>No (loops execute at runtime)</td>
    </tr>
    <tr>
      <td>Readability &amp; Debugging</td>
      <td>Hard to debug</td>
      <td>Easy to debug</td>
    </tr>
  </tbody>
</table>

<h3 id="when-should-you-use-macros">When Should You Use Macros?</h3>

<ul>
  <li>You need compile-time code generation to optimize performance.</li>
  <li>You need to support multiple types dynamically.</li>
  <li>You need variable-length arguments (e.g., <code class="language-plaintext highlighter-rouge">println!</code>).</li>
</ul>

<h3 id="when-should-you-use-functions">When Should You Use Functions?</h3>

<ul>
  <li>You need standard logic implementation.</li>
  <li>You need easier debugging.</li>
  <li>You have repetitive logic that doesn’t require compile-time expansion.</li>
</ul>

<h3 id="macros-are-not-just-about-avoiding-code-repetition">Macros are not just about avoiding code repetition</h3>

<ul>
  <li>If simple repetition is needed, functions are usually a better choice.</li>
  <li>Use macros when you need compile-time optimizations, dynamic argument handling, or complex code generation.</li>
</ul>

<h2 id="compile-time-vs-runtime-execution">Compile-Time vs. Runtime Execution</h2>

<table>
  <thead>
    <tr>
      <th>Feature</th>
      <th>Compile Time (Macro Expansion)</th>
      <th>Runtime (Function Execution)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Macros (macro_rules!)</td>
      <td>Code is expanded at compile time</td>
      <td>Never executed directly</td>
    </tr>
    <tr>
      <td>Functions (fn)</td>
      <td>No expansion at compile time</td>
      <td>Executed during runtime</td>
    </tr>
    <tr>
      <td>Error Detection</td>
      <td>Errors occur at compile time</td>
      <td>Errors occur at runtime</td>
    </tr>
  </tbody>
</table>

<h3 id="using-macros-macro_rules">Using Macros (macro_rules!)</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">macro_rules!</span> <span class="n">repeat</span> <span class="p">{</span>
    <span class="p">(</span><span class="nv">$msg:expr</span><span class="p">,</span> <span class="nv">$count:expr</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="nv">$</span><span class="p">(</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="nv">$msg</span><span class="p">);</span> <span class="p">)</span><span class="o">*</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nd">repeat!</span><span class="p">(</span><span class="s">"Hello, Rust!"</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    
    <span class="c1">// The macro expands into:</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="s">"Hello, Rust!"</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="s">"Hello, Rust!"</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="s">"Hello, Rust!"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>The macro expands the <code class="language-plaintext highlighter-rouge">println!</code> calls at compile time, rather than looping at runtime.</li>
  <li>When compiled, the executable already contains three <code class="language-plaintext highlighter-rouge">println!</code> statements, eliminating any need for iteration at runtime.</li>
</ul>

<h3 id="using-functions-fn">Using Functions (fn)</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">repeat</span><span class="p">(</span><span class="n">msg</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="n">count</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">count</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">repeat</span><span class="p">(</span><span class="s">"Rust is awesome!"</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>The function executes a loop at runtime instead of unrolling at compile time.</li>
  <li>The compiled binary contains a loop, which adds execution overhead compared to macros.</li>
</ul>

<h2 id="advantages-of-using-macros">Advantages of Using Macros</h2>

<p>Macros expand code at compile time, reducing runtime overhead.</p>

<ul>
  <li>Functions require stack management and runtime execution.</li>
  <li>Macros allow code to be directly inserted into the final program, avoiding function calls.</li>
  <li>For example, match statements inside macros can be expanded into static branching logic, improving performance.</li>
</ul>

<h2 id="why-macros-are-hard-to-debug">Why Macros Are Hard to Debug</h2>

<h3 id="macros-expand-into-new-code-before-compiling">Macros Expand Into New Code Before Compiling</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">macro_rules!</span> <span class="n">bad_macro</span> <span class="p">{</span>
    <span class="p">(</span><span class="nv">$val:expr</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nv">$val</span> <span class="p">{</span>
            <span class="nd">println!</span><span class="p">(</span><span class="s">"True"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nd">println!</span><span class="p">(</span><span class="s">"False"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nd">bad_macro!</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>  <span class="c1">// error</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The macro expands before compilation, replacing <code class="language-plaintext highlighter-rouge">bad_macro!(42)</code>; with:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="mi">42</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"True"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"False"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But if 42 is not valid in Rust -&gt; this causes a type mismatch.</p>

<p>Rust’s error message points to the expanded code, not the macro definition:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error[E0308]: mismatched types
 <span class="nt">--</span><span class="o">&gt;</span> src/main.rs:9:5
  |
9 |     bad_macro!<span class="o">(</span>42<span class="o">)</span><span class="p">;</span>
  |     ^^^^^^^^^^^^^ expected <span class="sb">`</span>bool<span class="sb">`</span>, found integer
  |
  <span class="o">=</span> note: expected <span class="nb">type</span> <span class="sb">`</span>bool<span class="sb">`</span>
             found <span class="nb">type</span> <span class="sb">`</span><span class="o">{</span>integer<span class="o">}</span><span class="sb">`</span>
</code></pre></div></div>

<p>Rust does not indicate that the error originated inside <code class="language-plaintext highlighter-rouge">bad_macro!</code>.
Instead, it shows an error where the macro was expanded, making debugging more difficult.</p>

<h3 id="debugging-logs-are-limited">Debugging Logs Are Limited</h3>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">macro_rules!</span> <span class="n">debug_macro</span> <span class="p">{</span>
    <span class="p">(</span><span class="nv">$val:expr</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">result</span> <span class="o">=</span> <span class="nv">$val</span> <span class="o">/</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// Runtime error</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nd">debug_macro!</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>This macro expands before compilation, meaning <code class="language-plaintext highlighter-rouge">let result = 10 / 0;</code> is inserted directly.</li>
  <li>Rust won’t warn about division by zero at compile time, but it crashes at runtime.</li>
  <li>Debugging is difficult because Rust does not pinpoint where inside the macro the issue originated.</li>
</ul>

<h3 id="how-to-debug-macros">How to Debug Macros?</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo <span class="nb">install </span>cargo-expand
cargo <span class="nb">expand</span>
</code></pre></div></div>

<ul>
  <li>Use <code class="language-plaintext highlighter-rouge">cargo expand</code> to view the expanded macro output</li>
</ul>

<h2 id="comparison-with-c-macros">Comparison with C Macros</h2>

<p>Although C and Rust are both compiled languages, Rust macros provide safer and more structured compile-time code generation.</p>

<h3 id="define">#define</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="cp">#define SQUARE(x) (x * x)
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">SQUARE</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// Expands to: (5 * 5)</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>C macros are text replacements, not structured code transformations.</li>
  <li>They lack type checking and can introduce subtle bugs.</li>
  <li>Rust macros, in contrast, operate within the compiler and ensure type safety.</li>
</ul>

<h3 id="inline-functions">inline Functions</h3>

<h4 id="comparison-with-rust-macros">Comparison with Rust Macros</h4>

<table>
  <thead>
    <tr>
      <th>Feature</th>
      <th>C inline Function</th>
      <th>Rust Macro (macro_rules!)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Compile-Time Expansion</td>
      <td>Compiler decides whether to inline</td>
      <td>Always expands at compile time</td>
    </tr>
    <tr>
      <td>Guaranteed Optimization</td>
      <td>Not always inlined</td>
      <td>Always replaces code directly</td>
    </tr>
    <tr>
      <td>Code Size Consideration</td>
      <td>Large functions may not be inlined</td>
      <td>Can increase code size</td>
    </tr>
    <tr>
      <td>Flexibility</td>
      <td>Works with fixed types</td>
      <td>Works with multiple types and patterns</td>
    </tr>
  </tbody>
</table>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kr">inline</span> <span class="kt">int</span> <span class="nf">square</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">square</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Compilers may choose not to inline functions for performance reasons.</li>
  <li>Large or recursive functions will not be inlined.</li>
  <li>Rust macros, in contrast, always expand before compilation.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p><strong>When to Use Rust Macros?</strong></p>

<ul>
  <li>You need compile-time code generation for performance.</li>
  <li>You need flexible, generic behavior across multiple types.</li>
  <li>You need variadic arguments (e.g., <code class="language-plaintext highlighter-rouge">println!</code>).</li>
</ul>

<p><strong>When to Avoid Rust Macros?</strong></p>

<ul>
  <li>You need easier debugging -&gt; Functions are better.</li>
  <li>You don’t need compile-time code transformation -&gt; Functions work fine.</li>
  <li>Your macro logic is too complex -&gt; Hard to maintain.</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="rust" /><summary type="html"><![CDATA[Macros in Rust allow code to be expanded at compile time and included in the final executable.]]></summary></entry><entry><title type="html">defer in Go Doesn’t Always Reflect the Latest Value</title><link href="http://localhost:4000/2025/03/14/go-defer-value/" rel="alternate" type="text/html" title="defer in Go Doesn’t Always Reflect the Latest Value" /><published>2025-03-14T00:00:00+09:00</published><updated>2025-03-14T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/14/go-defer-value</id><content type="html" xml:base="http://localhost:4000/2025/03/14/go-defer-value/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#the-problem">The Problem</a></li>
  <li><a href="#the-reason-why-status-is-not-updated">The Reason why status is not updated</a></li>
  <li><a href="#how-to-fix-it">How to Fix It?</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="the-problem">The Problem</h2>

<p>Consider the following Go function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">f</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">status</span> <span class="kt">string</span>  <span class="c">// Initialized as an empty string</span>
    <span class="k">defer</span> <span class="n">notify</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">foo</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">status</span> <span class="o">=</span> <span class="s">"error"</span>  <span class="c">// Status changes here, but defer does not reflect this change</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="n">status</span> <span class="o">=</span> <span class="s">"success"</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We might expect notify(status) to reflect the latest value of status.
However, in reality, it always receives an empty string (<code class="language-plaintext highlighter-rouge">""</code>), regardless of how status is updated later.</p>

<h2 id="the-reason-why-status-is-not-updated">The Reason why status is not updated</h2>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">status</span> <span class="kt">string</span> <span class="c">// ""</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">status</code> is initialized as an empty string</li>
  <li><code class="language-plaintext highlighter-rouge">defer</code> evaluates its arguments immediately when declared.
    <ul>
      <li>When <code class="language-plaintext highlighter-rouge">defer notify(status)</code> is called, <code class="language-plaintext highlighter-rouge">status</code> is still an empty string.</li>
      <li>Thus, <code class="language-plaintext highlighter-rouge">defer</code> captures the empty string(<code class="language-plaintext highlighter-rouge">""</code>) at this moment and never updates, even if <code class="language-plaintext highlighter-rouge">status</code> changes later.</li>
    </ul>
  </li>
  <li>Even though <code class="language-plaintext highlighter-rouge">status</code> is modified in the function, the deferred function call was already bound to the original value of <code class="language-plaintext highlighter-rouge">status</code> (empty string).</li>
  <li>In Go, when a function is deferred, its arguments are evaluated and stored immediately—not when the function actually executes.</li>
</ul>

<h2 id="how-to-fix-it">How to Fix It?</h2>

<p>To ensure that notify(status) receives the latest value of status, we can use two different approaches.</p>

<h3 id="1-using-a-closure-anonymous-function">1. Using a Closure (Anonymous Function)</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span> <span class="n">notify</span><span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="p">}()</span>
</code></pre></div></div>

<ul>
  <li>Instead of immediately passing <code class="language-plaintext highlighter-rouge">status</code> to <code class="language-plaintext highlighter-rouge">notify</code>, we defer an anonymous function.</li>
  <li>This function captures <code class="language-plaintext highlighter-rouge">status</code> at the moment <code class="language-plaintext highlighter-rouge">defer</code> executes, ensuring it reflects the latest value.</li>
  <li>When <code class="language-plaintext highlighter-rouge">notify(status)</code> is finally called, it uses the updated value of <code class="language-plaintext highlighter-rouge">status</code>.</li>
</ul>

<h3 id="2-passing-a-pointer">2. Passing a Pointer</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defer</span> <span class="n">notify</span><span class="p">(</span><span class="o">&amp;</span><span class="n">status</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>Instead of passing the value of <code class="language-plaintext highlighter-rouge">status</code>, we pass its memory address (<code class="language-plaintext highlighter-rouge">&amp;status</code>).</li>
  <li>Since <code class="language-plaintext highlighter-rouge">defer</code> captures the pointer, any changes to <code class="language-plaintext highlighter-rouge">status</code> are reflected at execution time.</li>
  <li>However, this requires modifying <code class="language-plaintext highlighter-rouge">notify</code> to accept a pointer parameter.</li>
</ul>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// If using a pointer, notify must be updated:</span>
<span class="c">// Dereference the pointer to get the latest value</span>
<span class="k">func</span> <span class="n">notify</span><span class="p">(</span><span class="n">status</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">*</span><span class="n">status</span><span class="p">)</span> 
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3-comparison-of-solutions">3. Comparison of Solutions</h3>

<table>
  <thead>
    <tr>
      <th>Approach</th>
      <th>How it Works</th>
      <th>Requires Function Signature Change?</th>
      <th>Best Use Case</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Closure (Anonymous Function)</td>
      <td>Captures <code class="language-plaintext highlighter-rouge">status</code> at execution time</td>
      <td>No</td>
      <td>Works for most cases</td>
    </tr>
    <tr>
      <td>Pointer Passing (&amp;status)</td>
      <td>Passes a pointer, reflects latest value</td>
      <td>Yes</td>
      <td>When working with functions that support pointers</td>
    </tr>
  </tbody>
</table>

<h2 id="conclusion">Conclusion</h2>

<ul>
  <li>Deferred functions capture arguments immediately, not when they actually run.</li>
  <li>If the deferred function needs the latest value, use:
    <ul>
      <li>Closures (Anonymous Functions): Recommended, as they don’t require modifying function signatures.</li>
      <li>Pointers (&amp;status): Useful when modifying function behavior explicitly.</li>
    </ul>
  </li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="go" /><summary type="html"><![CDATA[In Go, Deferred functions capture arguments immediately, not when they actually run.]]></summary></entry><entry><title type="html">Using sync.Cond for Goroutine Synchronization in Go</title><link href="http://localhost:4000/2025/03/13/go-sync-cond/" rel="alternate" type="text/html" title="Using sync.Cond for Goroutine Synchronization in Go" /><published>2025-03-13T00:00:00+09:00</published><updated>2025-03-13T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/13/go-sync-cond</id><content type="html" xml:base="http://localhost:4000/2025/03/13/go-sync-cond/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#what-is-synccond">What is <code class="language-plaintext highlighter-rouge">sync.Cond</code>?</a></li>
  <li><a href="#how-synccond-works">How <code class="language-plaintext highlighter-rouge">sync.Cond</code> Works</a></li>
  <li><a href="#example-donation-goal-tracker-using-synccond">Example: Donation Goal Tracker Using <code class="language-plaintext highlighter-rouge">sync.Cond</code></a></li>
  <li><a href="#comparison-signal-vs-broadcast">Comparison: <code class="language-plaintext highlighter-rouge">Signal()</code> vs. <code class="language-plaintext highlighter-rouge">Broadcast()</code></a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="what-is-synccond">What is sync.Cond?</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sync.Cond</code> is a condition variable that helps synchronize multiple goroutines.</li>
  <li>It is typically used when one or more goroutines must wait until a shared resource reaches a specific state.</li>
  <li>One goroutine waits (<code class="language-plaintext highlighter-rouge">Wait()</code>) until a condition is satisfied, and another goroutine notifies (<code class="language-plaintext highlighter-rouge">Signal()</code> or <code class="language-plaintext highlighter-rouge">Broadcast()</code>) the waiting goroutines when the condition is met.</li>
</ul>

<h2 id="how-synccond-works">How sync.Cond Works</h2>

<table>
  <thead>
    <tr>
      <th><strong>Method</strong></th>
      <th><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Wait()</code></td>
      <td>Makes a goroutine wait until a condition is met (automatically unlocks the mutex)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Signal()</code></td>
      <td>Wakes only one waiting goroutine (even if multiple goroutines are waiting)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Broadcast()</code></td>
      <td>Wakes all waiting goroutines</td>
    </tr>
  </tbody>
</table>

<h2 id="example-donation-goal-tracker-using-synccond">Example: Donation Goal Tracker Using sync.Cond</h2>

<p>The following example demonstrates how <code class="language-plaintext highlighter-rouge">sync.Cond</code> can be used to coordinate multiple goroutines that monitor a donation goal.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
    <span class="s">"sync"</span>
    <span class="s">"time"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Donation</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">cond</span>    <span class="o">*</span><span class="n">sync</span><span class="o">.</span><span class="n">Cond</span> <span class="c">// Condition variable</span>
    <span class="n">balance</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">donation</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Donation</span><span class="p">{</span>
        <span class="n">cond</span><span class="o">:</span> <span class="n">sync</span><span class="o">.</span><span class="n">NewCond</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sync</span><span class="o">.</span><span class="n">Mutex</span><span class="p">{}),</span> <span class="c">// Create a condition variable with a mutex</span>
    <span class="p">}</span>

    <span class="c">// Listener goroutine (checks if goal is reached)</span>
    <span class="n">f</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">goal</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span> <span class="c">// Acquire mutex lock</span>
        <span class="k">for</span> <span class="n">donation</span><span class="o">.</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="n">goal</span> <span class="p">{</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span> <span class="c">// Wait until balance &gt;= goal</span>
        <span class="p">}</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">donation</span><span class="o">.</span><span class="n">balance</span><span class="p">)</span>
        <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span> <span class="c">// Release mutex lock</span>
    <span class="p">}</span>

    <span class="k">go</span> <span class="n">f</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
    <span class="k">go</span> <span class="n">f</span><span class="p">(</span><span class="m">15</span><span class="p">)</span>

    <span class="c">// Updater goroutine (increments balance)</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">{</span>
            <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">balance</span><span class="o">++</span> <span class="c">// Increase balance</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">Broadcast</span><span class="p">()</span> <span class="c">// Wake all waiting goroutines</span>
        <span class="p">}</span>
    <span class="p">}()</span>

    <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">20</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span> <span class="c">// Keep program running</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="step-1-creating-a-synccond-object">Step 1: Creating a sync.Cond Object</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Donation</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">cond</span>    <span class="o">*</span><span class="n">sync</span><span class="o">.</span><span class="n">Cond</span>  
    <span class="n">balance</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="n">donation</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Donation</span><span class="p">{</span>
    <span class="n">cond</span><span class="o">:</span> <span class="n">sync</span><span class="o">.</span><span class="n">NewCond</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sync</span><span class="o">.</span><span class="n">Mutex</span><span class="p">{}),</span> 
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cond</code>: A condition variable based on <code class="language-plaintext highlighter-rouge">sync.Mutex</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">sync.Cond</code> provides synchronization between multiple goroutines using <code class="language-plaintext highlighter-rouge">Wait()</code>, <code class="language-plaintext highlighter-rouge">Signal()</code>, and <code class="language-plaintext highlighter-rouge">Broadcast()</code>.</li>
</ul>

<h3 id="step-2-listener-goroutine-fgoal-int">Step 2: Listener Goroutine (<code class="language-plaintext highlighter-rouge">f(goal int)</code>)</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">goal</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>  
    <span class="k">for</span> <span class="n">donation</span><span class="o">.</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="n">goal</span> <span class="p">{</span>
        <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span> <span class="c">// Wait until condition is met</span>
    <span class="p">}</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">donation</span><span class="o">.</span><span class="n">balance</span><span class="p">)</span>
    <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span> 
<span class="p">}</span>
</code></pre></div></div>

<p>How It Works:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">donation.cond.L.Lock()</code>: Acquires mutex lock before checking <code class="language-plaintext highlighter-rouge">donation.balance</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">for donation.balance &lt; goal</code>: Checks if goal is reached.</li>
  <li><code class="language-plaintext highlighter-rouge">donation.cond.Wait()</code>:
    <ul>
      <li>Pauses execution until another goroutine calls <code class="language-plaintext highlighter-rouge">Signal()</code> or <code class="language-plaintext highlighter-rouge">Broadcast()</code>.</li>
      <li>Automatically releases the mutex lock while waiting.</li>
    </ul>
  </li>
  <li>Once woken up, the goroutine resumes execution, prints the message, and releases the lock (<code class="language-plaintext highlighter-rouge">L.Unlock()</code>).</li>
</ol>

<h3 id="step-3-updater-goroutine">Step 3: Updater Goroutine</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">{</span>
    <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
    <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
    <span class="n">donation</span><span class="o">.</span><span class="n">balance</span><span class="o">++</span>      
    <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">L</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
    <span class="n">donation</span><span class="o">.</span><span class="n">cond</span><span class="o">.</span><span class="n">Broadcast</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>How It Works:</p>

<ol>
  <li>Acquires the lock (<code class="language-plaintext highlighter-rouge">donation.cond.L.Lock()</code>).</li>
  <li>Increments the balance every second (<code class="language-plaintext highlighter-rouge">donation.balance++</code>).</li>
  <li>Releases the lock (<code class="language-plaintext highlighter-rouge">donation.cond.L.Unlock()</code>).</li>
  <li>Calls <code class="language-plaintext highlighter-rouge">donation.cond.Broadcast()</code>:
    <ul>
      <li>Wakes up all waiting goroutines.</li>
      <li>Each waiting goroutine checks if its goal is met and either continues waiting or exits.</li>
    </ul>
  </li>
</ol>

<h3 id="overall-execution-flow">Overall Execution Flow</h3>

<table>
  <thead>
    <tr>
      <th><strong>Step</strong></th>
      <th><strong>Active Goroutine(s)</strong></th>
      <th><strong>Balance</strong></th>
      <th><strong>After Broadcast()</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>f(10), f(15) (waiting)</td>
      <td>0</td>
      <td>Still waiting</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Updater goroutine</td>
      <td>1 -&gt; 9</td>
      <td>Still waiting</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Updater goroutine</td>
      <td>10</td>
      <td>f(10) wakes up and exits</td>
    </tr>
    <tr>
      <td>4</td>
      <td>f(15) (still waiting)</td>
      <td>11 -&gt; 14</td>
      <td>Still waiting</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Updater goroutine</td>
      <td>15</td>
      <td>f(15) wakes up and exits</td>
    </tr>
  </tbody>
</table>

<p>Key Observations:</p>

<ul>
  <li>Each time balance increases, <code class="language-plaintext highlighter-rouge">Broadcast()</code> wakes all waiting goroutines.</li>
  <li>If a goroutine’s goal is not met, it goes back to <code class="language-plaintext highlighter-rouge">Wait()</code>.</li>
  <li>If a goroutine’s goal is met, it exits after printing the result.</li>
  <li>Once all goals are reached, no goroutines are waiting, so <code class="language-plaintext highlighter-rouge">Broadcast()</code> no longer has any effect.</li>
</ul>

<h2 id="comparison-signal-vs-broadcast">Comparison: Signal() vs. Broadcast()</h2>

<table>
  <thead>
    <tr>
      <th><strong>Method</strong></th>
      <th><strong>Behavior</strong></th>
      <th><strong>Use Case</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Wait()</code></td>
      <td>Makes a goroutine wait until a condition is met (automatically unlocks the mutex)</td>
      <td>Used when waiting for a condition</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Signal()</code></td>
      <td>Wakes only one waiting goroutine (even if multiple goroutines are waiting)</td>
      <td>Use when a single goroutine should proceed</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Broadcast()</code></td>
      <td>Wakes all waiting goroutines</td>
      <td>Use when all goroutines should be notified</td>
    </tr>
  </tbody>
</table>

<p>When to Use <code class="language-plaintext highlighter-rouge">Signal()</code> vs. <code class="language-plaintext highlighter-rouge">Broadcast()</code></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Signal()</code>: Use when only one goroutine needs to proceed.</li>
  <li><code class="language-plaintext highlighter-rouge">Broadcast()</code>: Use when all waiting goroutines should be notified (e.g., donation.balance updates).</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sync.Cond</code> helps synchronize multiple goroutines by allowing them to wait for a condition to be met.</li>
  <li><code class="language-plaintext highlighter-rouge">Wait()</code> makes goroutines wait, while <code class="language-plaintext highlighter-rouge">Signal()</code> and <code class="language-plaintext highlighter-rouge">Broadcast()</code> notify them.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">Broadcast()</code> when all waiting goroutines should proceed, and use <code class="language-plaintext highlighter-rouge">Signal()</code> when only one goroutine should continue.</li>
  <li><code class="language-plaintext highlighter-rouge">sync.Cond</code> is useful for implementing event-based synchronization, such as resource availability or state changes.</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="go" /><summary type="html"><![CDATA[In Go, sync.Cond is a synchronization primitive that allows goroutines to efficiently wait until a certain condition is met. It helps coordinate multiple goroutines by providing a mechanism to wait (Wait()) and notify (Signal() or Broadcast()) when conditions change.]]></summary></entry><entry><title type="html">Understanding GasKVStore in Cosmos SDK</title><link href="http://localhost:4000/2025/03/12/cosmos-sdk-gaskvstore/" rel="alternate" type="text/html" title="Understanding GasKVStore in Cosmos SDK" /><published>2025-03-12T00:00:00+09:00</published><updated>2025-03-12T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/12/cosmos-sdk-gaskvstore</id><content type="html" xml:base="http://localhost:4000/2025/03/12/cosmos-sdk-gaskvstore/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#overview-of-gaskvstore">Overview of GasKVStore</a></li>
  <li><a href="#core-methods-of-gaskvstore">Core Methods of GasKVStore</a></li>
  <li><a href="#gas-consumption-based-on-key-and-value-size">Gas Consumption Based on Key and Value Size</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="overview-of-gaskvstore">Overview of GasKVStore</h2>

<p>GasKVStore measures gas usage in real-time as internal field values change during transaction execution.
Each read, write, and delete operation is designed to consume gas, ensuring that gas limits are properly enforced.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Store applies gas tracking to an underlying KVStore. It implements the KVStore interface.</span>
<span class="k">type</span> <span class="n">Store</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">gasMeter</span>  <span class="n">types</span><span class="o">.</span><span class="n">GasMeter</span>   <span class="c">// GasMeter that tracks gas usage during transactions</span>
    <span class="n">gasConfig</span> <span class="n">types</span><span class="o">.</span><span class="n">GasConfig</span>  <span class="c">// Configuration for gas costs of read/write/delete operations</span>
    <span class="n">parent</span>    <span class="n">types</span><span class="o">.</span><span class="n">KVStore</span>    <span class="c">// The underlying KVStore that stores actual data</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="core-methods-of-gaskvstore">Core Methods of GasKVStore</h2>

<table>
  <thead>
    <tr>
      <th><strong>Method</strong></th>
      <th><strong>Functionality</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Get(key)</td>
      <td>Reads the value of a given key and consumes gas proportional to the key size</td>
    </tr>
    <tr>
      <td>Set(key, value)</td>
      <td>Stores a value for a given key and consumes gas based on both key and value size</td>
    </tr>
    <tr>
      <td>Delete(key)</td>
      <td>Deletes a key-value pair and consumes a fixed amount of gas</td>
    </tr>
  </tbody>
</table>

<h3 id="1-getkey---read-operation">1. Get(key) - Read Operation</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">g</span> <span class="o">*</span><span class="n">GasKVStore</span><span class="p">)</span> <span class="n">Get</span><span class="p">(</span><span class="n">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
    <span class="n">g</span><span class="o">.</span><span class="n">meter</span><span class="o">.</span><span class="n">ConsumeGas</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">gasConfig</span><span class="o">.</span><span class="n">ReadCostPerByte</span> <span class="o">*</span> <span class="kt">uint64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)),</span> <span class="s">"Read"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">g</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>This function retrieves the value associated with a key.</li>
  <li>It is similar to searching for a word in a book.</li>
  <li>The function fetches and returns the data stored in the parent KVStore.</li>
</ul>

<h3 id="2-setkey-value---write-operation">2. Set(key, value) - Write Operation</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">g</span> <span class="o">*</span><span class="n">GasKVStore</span><span class="p">)</span> <span class="n">Set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">gasToConsume</span> <span class="o">:=</span> <span class="n">g</span><span class="o">.</span><span class="n">gasConfig</span><span class="o">.</span><span class="n">WriteCostPerByte</span> <span class="o">*</span> <span class="kt">uint64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
    <span class="n">g</span><span class="o">.</span><span class="n">meter</span><span class="o">.</span><span class="n">ConsumeGas</span><span class="p">(</span><span class="n">gasToConsume</span><span class="p">,</span> <span class="s">"Write"</span><span class="p">)</span>
    <span class="n">g</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>This function stores a new value for a given key.</li>
  <li>It works like adding new content to a book.</li>
  <li>The function records or updates data in the parent KVStore.</li>
</ul>

<h3 id="3-deletekey---delete-operation">3. Delete(key) - Delete Operation</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">g</span> <span class="o">*</span><span class="n">GasKVStore</span><span class="p">)</span> <span class="n">Delete</span><span class="p">(</span><span class="n">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">g</span><span class="o">.</span><span class="n">meter</span><span class="o">.</span><span class="n">ConsumeGas</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">gasConfig</span><span class="o">.</span><span class="n">DeleteCost</span><span class="p">,</span> <span class="s">"Delete"</span><span class="p">)</span>
    <span class="n">g</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">Delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>This function removes the data associated with a given key.</li>
  <li>It is similar to erasing a word from a book.</li>
  <li>The function deletes data stored in the parent KVStore.</li>
</ul>

<h2 id="gas-consumption-based-on-key-and-value-size">Gas Consumption Based on Key and Value Size</h2>

<p>Some methods in GasKVStore consume gas in proportion to the size of the key and value.
While gas in blockchain systems is often associated with CPU execution costs, the Cosmos SDK includes storage access costs as well.
Thus, the size of the key affects gas consumption.</p>

<h3 id="what-is-a-key">What is a Key?</h3>

<p>A key is an address that identifies a specific state in the blockchain.
It serves as an identifier for a specific data entry managed by a module.</p>

<p>Here are some examples:</p>

<h4 id="1-bank-module-storing-account-balances">1. Bank module storing account balances</h4>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="s">"balances/&lt;account_address&gt;"</span>
<span class="n">value</span> <span class="o">=</span> <span class="s">"&lt;account_balance&gt;"</span>
</code></pre></div></div>

<h4 id="2-staking-module-storing-validator-information">2. Staking module storing validator information</h4>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="s">"validators/&lt;validator_address&gt;"</span>
<span class="n">value</span> <span class="o">=</span> <span class="s">"&lt;validator_info&gt;"</span>
</code></pre></div></div>

<h4 id="3-ibc-module-storing-channel-information">3. IBC module storing channel information</h4>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="s">"ibc/ports/&lt;port_id&gt;/channels/&lt;channel_id&gt;"</span>
<span class="n">value</span> <span class="o">=</span> <span class="s">"&lt;channel_info&gt;"</span>
</code></pre></div></div>

<h3 id="why-key-size-affects-gas-consumption">Why Key Size Affects Gas Consumption?</h3>

<ul>
  <li>In the Cosmos SDK, gas is not only used for computation but also for storage access.</li>
  <li>Since accessing a key-value store (KVStore) consumes gas, larger keys and values require more gas.</li>
  <li>The longer the key, the more resources are needed to retrieve and store it, resulting in higher gas costs.</li>
</ul>

<h3 id="gas-consumption-per-method">Gas Consumption per Method</h3>

<table>
  <thead>
    <tr>
      <th><strong>Operation</strong></th>
      <th><strong>Function</strong></th>
      <th><strong>Gas Consumption Criteria</strong></th>
      <th><strong>Gas Consumption Amount</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Get(key)</td>
      <td>Reads the value of a key</td>
      <td>Proportional to key size</td>
      <td>Low</td>
    </tr>
    <tr>
      <td>Set(key, value)</td>
      <td>Stores a new value for a key</td>
      <td>Proportional to key + value size</td>
      <td>High</td>
    </tr>
    <tr>
      <td>Delete(key)</td>
      <td>Deletes a key-value pair</td>
      <td>Fixed cost (DeleteCost)</td>
      <td>Medium</td>
    </tr>
  </tbody>
</table>

<h4 id="1-getkey---gas-consumption-for-reads">1. Get(key) - Gas Consumption for Reads</h4>

<p>Gas is consumed in proportion to the key size since retrieving a value requires locating the key in storage.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Example: Retrieving an account balance from the bank module</span>
<span class="n">store</span> <span class="o">:=</span> <span class="n">ctx</span><span class="o">.</span><span class="n">KVStore</span><span class="p">(</span><span class="n">bankStoreKey</span><span class="p">)</span>
<span class="n">balanceKey</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"balances/cosmos1xyz..."</span><span class="p">)</span>  <span class="c">// Using account address as key</span>
<span class="n">balance</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">balanceKey</span><span class="p">)</span>  <span class="c">// Gas is consumed here</span>
</code></pre></div></div>

<h4 id="2-setkey-value---gas-consumption-for-writes">2. Set(key, value) - Gas Consumption for Writes</h4>

<p>Gas is consumed in proportion to the sum of key and value sizes since writing new data requires additional storage resources.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Example: Storing validator information</span>
<span class="n">store</span> <span class="o">:=</span> <span class="n">ctx</span><span class="o">.</span><span class="n">KVStore</span><span class="p">(</span><span class="n">stakingStoreKey</span><span class="p">)</span>
<span class="n">validatorKey</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"validators/valoper1abc..."</span><span class="p">)</span>  
<span class="n">validatorInfo</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"{status: active, power: 1000}"</span><span class="p">)</span>  
<span class="n">store</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">validatorKey</span><span class="p">,</span> <span class="n">validatorInfo</span><span class="p">)</span>  <span class="c">// Gas is consumed here</span>
</code></pre></div></div>

<p>Steps:</p>

<ol>
  <li>Locate the key “validators/valoper1abc…” in storage (or create a new entry if it does not exist).</li>
  <li>Store the value “{status: active, power: 1000}”.</li>
  <li>Consume gas proportional to the size of both the key and value.</li>
</ol>

<h4 id="3-deletekey---gas-consumption-for-deletes">3. Delete(key) - Gas Consumption for Deletes</h4>

<p>Gas consumption is fixed (DeleteCost), independent of key size.</p>

<p><em>Why is deletion a fixed-cost operation?</em></p>

<ul>
  <li>Deleting is a simple operation
    <ul>
      <li>Writing new data (Set) modifies storage, while deleting data (Delete) simply marks it as removed.</li>
    </ul>
  </li>
  <li>Deletion can be faster than retrieval
    <ul>
      <li>Get(key) requires searching for a key, meaning longer keys take longer to process.</li>
      <li>Delete(key) usually marks data as deleted, which is computationally simpler.</li>
    </ul>
  </li>
  <li>Merkle Tree Structure
    <ul>
      <li>The Cosmos SDK uses a Merkle Tree-based IAVL Store, where deletions primarily mark nodes as invalid rather than requiring extensive modifications.</li>
      <li>As a result, gas does not need to scale with key size.</li>
    </ul>
  </li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<ul>
  <li>GasKVStore ensures real-time tracking of gas consumption during transaction execution, preventing gas limit violations.</li>
  <li>Gas is consumed not only for CPU operations but also for accessing and modifying storage (KVStore).</li>
  <li>Optimizing key and value sizes can help reduce unnecessary gas costs.</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="cosmos-sdk" /><summary type="html"><![CDATA[GasKVStore is a core component of the Cosmos SDK that tracks gas consumption in real-time during transaction execution. It ensures that every read, write, and delete operation consumes gas, helping to prevent transactions from exceeding their gas limits.]]></summary></entry><entry><title type="html">Understanding Channel Iteration in Go: for range vs. select vs. switch</title><link href="http://localhost:4000/2025/03/09/go-channel-iteration/" rel="alternate" type="text/html" title="Understanding Channel Iteration in Go: for range vs. select vs. switch" /><published>2025-03-09T00:00:00+09:00</published><updated>2025-03-09T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/09/go-channel-iteration</id><content type="html" xml:base="http://localhost:4000/2025/03/09/go-channel-iteration/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#code-example-donation-goal-tracker">Code Example: Donation Goal Tracker</a></li>
  <li><a href="#using-for-range-to-read-from-a-channel">Using for range to Read from a Channel</a></li>
  <li><a href="#using-select-to-listen-for-channel-data">Using select to Listen for Channel Data</a></li>
  <li><a href="#comparison-table-for-range-vs-select-vs-switch">Comparison Table: <code class="language-plaintext highlighter-rouge">for range</code> vs. <code class="language-plaintext highlighter-rouge">select</code> vs. <code class="language-plaintext highlighter-rouge">switch</code></a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="code-example-donation-goal-tracker">Code Example: Donation Goal Tracker</h2>

<p>Below is a Go program that tracks donations using channels. Two goroutines (<code class="language-plaintext highlighter-rouge">f(10)</code> and <code class="language-plaintext highlighter-rouge">f(15)</code>) listen for updates on the donation balance, and another goroutine increments the balance every second.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
    <span class="s">"time"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Donation</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">balance</span> <span class="kt">int</span>
    <span class="n">ch</span>      <span class="k">chan</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">donation</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Donation</span><span class="p">{</span><span class="n">ch</span><span class="o">:</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">int</span><span class="p">)}</span>

    <span class="c">// Listener Goroutine (Checks if goal amount is reached)</span>
    <span class="n">f</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">goal</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">balance</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">donation</span><span class="o">.</span><span class="n">ch</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">goal</span> <span class="p">{</span>
                <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">balance</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">go</span> <span class="n">f</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
    <span class="k">go</span> <span class="n">f</span><span class="p">(</span><span class="m">15</span><span class="p">)</span>

    <span class="c">// Updater Goroutine (Increases balance)</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">{</span>
            <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">balance</span><span class="o">++</span>
            <span class="n">donation</span><span class="o">.</span><span class="n">ch</span> <span class="o">&lt;-</span> <span class="n">donation</span><span class="o">.</span><span class="n">balance</span>
        <span class="p">}</span>
    <span class="p">}()</span>

    <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">25</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span> <span class="c">// Keep the program running</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="using-for-range-to-read-from-a-channel">Using for range to Read from a Channel</h2>

<p>This is same as the previous example, but written in a more concise way.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">balance</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">donation</span><span class="o">.</span><span class="n">ch</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">goal</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">balance</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="how-for-range-works">How for range Works</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">range donation.ch</code>: Iterates over incoming values from the channel.</li>
  <li>Each time a new value is sent to <code class="language-plaintext highlighter-rouge">donation.ch</code>, it is immediately read and assigned to <code class="language-plaintext highlighter-rouge">balance</code>.</li>
  <li>The loop continues waiting for new values until the channel is closed.</li>
</ul>

<h3 id="key-characteristics-of-for-range">Key Characteristics of for range</h3>

<ul>
  <li>Automatically waits for new values.</li>
  <li>Stops when the channel is closed.</li>
  <li>Simple and efficient for single-channel reading.</li>
</ul>

<h2 id="using-select-to-listen-for-channel-data">Using select to Listen for Channel Data</h2>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">goal</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="k">select</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">balance</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">donation</span><span class="o">.</span><span class="n">ch</span><span class="o">:</span> <span class="c">// Process incoming value</span>
            <span class="k">if</span> <span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">goal</span> <span class="p">{</span>
                <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">balance</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="how-select-works">How select Works</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">case balance := &lt;-donation.ch</code>: Reads from the channel only when data is available.</li>
  <li>Useful when monitoring multiple channels simultaneously.</li>
  <li>Requires an explicit return or break to exit the loop.</li>
</ul>

<h3 id="key-characteristics-of-select">Key Characteristics of select</h3>

<ul>
  <li>Can handle multiple channels.</li>
  <li>Only executes when a channel has data.</li>
  <li>Requires an explicit exit condition.</li>
</ul>

<h2 id="why-switch-is-not-used">Why switch is Not Used</h2>

<p>A switch statement is not suitable for continuously reading from a channel.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">{</span>
    <span class="n">balance</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">donation</span><span class="o">.</span><span class="n">ch</span>
    <span class="k">switch</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">goal</span><span class="o">:</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d goal reached</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">balance</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="k">default</span><span class="o">:</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="problems-with-using-switch">Problems with Using switch</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">balance := &lt;-donation.ch</code>: Directly blocks waiting for a value (inefficient).</li>
  <li><code class="language-plaintext highlighter-rouge">default</code>: Executes unconditionally when no case matches, which prevents proper subscription behavior.</li>
</ul>

<h3 id="key-characteristics-of-switch">Key Characteristics of switch</h3>

<ul>
  <li>Cannot wait for channel updates.</li>
  <li>Inefficient because it forces direct value retrieval.</li>
  <li><code class="language-plaintext highlighter-rouge">default</code> runs even when there’s no new data.</li>
</ul>

<h2 id="comparison-table-for-range-vs-select-vs-switch">Comparison Table: for range vs. select vs. switch</h2>

<table>
  <thead>
    <tr>
      <th><strong>Method</strong></th>
      <th><strong>How It Works</strong></th>
      <th><strong>Can Monitor Channels?</strong></th>
      <th><strong>Exit Condition</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">for range</code></td>
      <td>Iterates when new values arrive</td>
      <td>Yes</td>
      <td>Automatically stops when the channel is closed</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">select</code></td>
      <td>Handles multiple channels</td>
      <td>Yes</td>
      <td>Requires explicit break or return</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">switch</code></td>
      <td>Simple conditional statement</td>
      <td>No</td>
      <td>Must manually read values</td>
    </tr>
  </tbody>
</table>

<h2 id="conclusion">Conclusion</h2>

<ul>
  <li>Use <code class="language-plaintext highlighter-rouge">for range</code> when working with a single channel that continuously receives values.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">select</code> when handling multiple channels or managing timeouts.</li>
  <li>Avoid <code class="language-plaintext highlighter-rouge">switch</code> for channel reading, as it lacks proper subscription behavior.</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="go" /><summary type="html"><![CDATA[In Go, channels are commonly used for communication between goroutines. This post explores different ways to read from channels and handle incoming values efficiently.]]></summary></entry><entry><title type="html">The Power of Daily Plan</title><link href="http://localhost:4000/2025/03/06/power-of-daily-plan/" rel="alternate" type="text/html" title="The Power of Daily Plan" /><published>2025-03-06T00:00:00+09:00</published><updated>2025-03-06T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/06/power-of-daily-plan</id><content type="html" xml:base="http://localhost:4000/2025/03/06/power-of-daily-plan/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#there-is-a-p-in-my-mbti-result">There is a P in my MBTI result</a></li>
  <li><a href="#why-planning-matters">Why Planning Matters</a></li>
  <li><a href="#the-challenges-of-planning">The Challenges of Planning</a></li>
  <li><a href="#learning-from-the-best">Learning from the Best</a></li>
  <li><a href="#the-importance-of-planning-in-workplaces">The Importance of Planning in Workplaces</a></li>
  <li><a href="#if-you-havent-been-planning-start-now">If You Haven’t Been Planning, Start Now</a></li>
  <li><a href="#if-you-dont-know-where-to-start">If You Don’t Know Where to Start</a></li>
  <li><a href="#we-cannot-do-everything">We Cannot Do Everything</a></li>
</ul>

<h2 id="there-is-a-p-in-my-mbti-result">There is a P in my MBTI result</h2>

<p>In other words, I find it difficult to set clear plans, and I am more accustomed to handling things spontaneously. The reason I use the words “difficult” and “accustomed” is not because I dislike planning or prefer working on impulse.</p>

<p>I don’t know about others with a P-type personality, but at least for me, I want to be more like a J.</p>

<p>Especially in my profession as a developer, having a well-structured plan is often essential for getting work done effectively.</p>

<h2 id="why-planning-matters">Why Planning Matters</h2>

<p>People who have achieved great success in life all have one thing in common: they plan their day before they start.</p>

<p>They don’t do this because they have too much or too little time. Instead, they take a sacred moment to determine the priorities for the day.</p>

<p>I describe it as “sacred” because it is a moment where we acknowledge the natural limitations of time that we, as humans, cannot escape.</p>

<h2 id="the-challenges-of-planning">The Challenges of Planning</h2>

<p>But planning isn’t easy.</p>

<ul>
  <li>Should I be conservative with my plans to avoid failure?</li>
  <li>Or should I set goals based on my ambition to complete everything I want?</li>
  <li>What should I do when unexpected events force me to adjust my plans?</li>
</ul>

<p>Even though I am a P-type, I don’t start my day without any plans at all.
However, I struggle to create detailed plans.
I leave multiple possibilities open for tasks that may change, so it’s hard for me to set a clear, measurable goal for what I will complete.</p>

<h2 id="learning-from-the-best">Learning from the Best</h2>

<p>So, how do highly skilled people approach this?</p>

<p>Someone I deeply admire follows a simple rule:
They plan their day based on the maximum number of hours they can fully focus on work.</p>

<p>Within that time, they prioritize the most important tasks instead of simply listing everything they need to do.</p>

<p>Even though their to-do list was short, they carefully considered the importance and urgency of each task.
This approach made them a smart, efficient, and highly capable worker.</p>

<h2 id="the-importance-of-planning-in-workplaces">The Importance of Planning in Workplaces</h2>

<p>Many IT companies require employees to plan their daily tasks and share them with the team.
However, not all workplaces have such systems in place.</p>

<p>I believe that creating a daily work plan is the single most important task, even if your company doesn’t require it.</p>

<p>This habit offers more than just team alignment and problem-solving efficiency.</p>

<p>More importantly, it helps you understand your own workload and set priorities to maximize productivity within your available time.</p>

<h2 id="if-you-havent-been-planning-start-now">If You Haven’t Been Planning, Start Now</h2>

<p>Regardless of experience level, if you are still starting your day without a plan, I strongly encourage you to make a change immediately.</p>

<p>At first, I also thought, “Why waste time planning? I should just get to work.”
Because of this mindset, I missed multiple opportunities to build a solid planning habit.</p>

<p>But as my workload grew and I needed to prioritize,
I realized that changing my deeply ingrained habit of not planning was incredibly difficult.</p>

<p>Even now, I am still working on improving,
and I am writing this to keep myself motivated.</p>

<h2 id="if-you-dont-know-where-to-start">If You Don’t Know Where to Start</h2>

<p>That’s okay. Planning is never easy.</p>

<p>No one is good at it from the beginning.
But with time and practice, you will get better at it.</p>

<p>One important thing: don’t be too ambitious.
If you plan too many tasks, you will only end up feeling overwhelmed.</p>

<p>Instead, prioritize what truly matters within your time constraints,
and have the courage to delay or eliminate tasks that don’t fit into your schedule.</p>

<h2 id="we-cannot-do-everything">We cannot do everything</h2>

<p>Even the exceptional people we look up to don’t do everything.
The difference is that they distinguish between what is important and what is not.</p>

<p>They don’t try to do it all.
Instead, they focus on their priorities with a sense of humility — knowing that time is limited, and they must make the most of it.</p>]]></content><author><name>Wonjoon</name></author><category term="essay" /><summary type="html"><![CDATA[Even the most exceptional people can’t do everything—they simply prioritize what truly matters, recognizing their limits and making the most of their time with humility.]]></summary></entry><entry><title type="html">Understanding Slice Initialization and Capacity in Go</title><link href="http://localhost:4000/2025/03/02/go-slice-initialization/" rel="alternate" type="text/html" title="Understanding Slice Initialization and Capacity in Go" /><published>2025-03-02T00:00:00+09:00</published><updated>2025-03-02T00:00:00+09:00</updated><id>http://localhost:4000/2025/03/02/go-slice-initialization</id><content type="html" xml:base="http://localhost:4000/2025/03/02/go-slice-initialization/"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#summary">Summary</a></li>
  <li><a href="#how-to-initialize-a-slice">How to Initialize a Slice</a></li>
  <li><a href="#advantages-of-preallocating-capacity">Advantages of Preallocating Capacity</a></li>
  <li><a href="#creating-a-slice-with-an-initial-length">Creating a Slice with an Initial Length</a></li>
</ul>

<h2 id="summary">Summary</h2>

<ol>
  <li>Preallocating capacity improves performance by reducing the number of reallocations when appending elements.</li>
  <li>If a slice is initialized with a non-zero length, it is pre-filled with zero values.</li>
  <li>Appending elements can trigger capacity expansion, usually doubling the size of the underlying array.</li>
</ol>

<h2 id="how-to-initialize-a-slice">How to Initialize a Slice</h2>

<p>In Go, the following code snippet creates a slice with length 0 and capacity 1:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Create a slice with length 0 and capacity 1</span>
<span class="n">slice</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Length(len)</code>: The number of elements currently stored in the slice. This represents the number of initialized elements.</li>
  <li><code class="language-plaintext highlighter-rouge">Capacity(cap)</code>: The total allocated size of the underlying array, which determines how many elements can be stored before reallocation is required.</li>
</ul>

<h2 id="advantages-of-preallocating-capacity">Advantages of Preallocating Capacity</h2>

<p>In Go, when a slice reaches its capacity, the underlying array doubles in size upon expansion.
If you expect a slice to grow significantly, preallocating capacity can improve performance by reducing memory reallocations.</p>

<p>Here is an example of capacity expansion in slices:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="c">// Initial capacity of 1</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="c">// Output: 0 1</span>

<span class="n">s</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span> <span class="c">// Fits within current capacity (1)</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="c">// Output: 1 1</span>

<span class="n">s</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="m">20</span><span class="p">)</span> <span class="c">// Exceeds capacity → reallocates (new capacity: 2)</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="c">// Output: 2 2</span>

<span class="n">s</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="m">30</span><span class="p">)</span> <span class="c">// Exceeds capacity again → reallocates (new capacity: 4)</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="c">// Output: 3 4</span>
</code></pre></div></div>

<ul>
  <li>When <code class="language-plaintext highlighter-rouge">append</code> is called, if the slice exceeds its current capacity, a new array is allocated with double the previous capacity.</li>
  <li>This reduces the number of reallocations when appending elements, optimizing performance.</li>
</ul>

<h2 id="creating-a-slice-with-an-initial-length">Creating a Slice with an Initial Length</h2>

<p>You can also specify the length when initializing a slice:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="c">// Length 0, Capacity 1</span>
<span class="n">s2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="c">// Length 1, Capacity 1</span>

<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span> <span class="c">// Output: []</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">s2</span><span class="p">)</span> <span class="c">// Output: [0]</span>
</code></pre></div></div>

<h3 id="effect-of-initializing-a-slice-with-a-non-zero-length">Effect of Initializing a Slice with a Non-Zero Length</h3>

<p>If you specify a non-zero length, the slice will be pre-filled with zero values.
This affects how append operations work:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s1</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> 
<span class="n">s2</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s2</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> 

<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s1</span><span class="p">))</span> <span class="c">// Output: [1] 1</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">s2</span><span class="p">,</span> <span class="nb">cap</span><span class="p">(</span><span class="n">s2</span><span class="p">))</span> <span class="c">// Output: [0,1] 2</span>
</code></pre></div></div>

<h3 id="why-does-s2-expand-its-capacity">Why Does s2 Expand Its Capacity?</h3>

<ul>
  <li>s2 was initialized with a length of 1, so it already contains a zero ([0]).</li>
  <li>When appending a new element (1), it exceeds the initial capacity of 1, causing Go to double the capacity to 2.</li>
  <li>On the other hand, s1 starts with length 0, so appending a single element does not exceed its initial capacity.</li>
</ul>]]></content><author><name>Wonjoon</name></author><category term="go" /><summary type="html"><![CDATA[Understanding slice capacity behavior is essential for writing efficient Go programs, especially when dealing with large or dynamic data structures.]]></summary></entry></feed>